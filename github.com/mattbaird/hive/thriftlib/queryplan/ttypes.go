// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package queryplan

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type AdjacencyType int64

const (
	AdjacencyType_CONJUNCTIVE AdjacencyType = 0
	AdjacencyType_DISJUNCTIVE AdjacencyType = 1
)

func (p AdjacencyType) String() string {
	switch p {
	case AdjacencyType_CONJUNCTIVE:
		return "AdjacencyType_CONJUNCTIVE"
	case AdjacencyType_DISJUNCTIVE:
		return "AdjacencyType_DISJUNCTIVE"
	}
	return "<UNSET>"
}

func AdjacencyTypeFromString(s string) (AdjacencyType, error) {
	switch s {
	case "AdjacencyType_CONJUNCTIVE":
		return AdjacencyType_CONJUNCTIVE, nil
	case "AdjacencyType_DISJUNCTIVE":
		return AdjacencyType_DISJUNCTIVE, nil
	}
	return AdjacencyType(math.MinInt32 - 1), fmt.Errorf("not a valid AdjacencyType string")
}

type NodeType int64

const (
	NodeType_OPERATOR NodeType = 0
	NodeType_STAGE    NodeType = 1
)

func (p NodeType) String() string {
	switch p {
	case NodeType_OPERATOR:
		return "NodeType_OPERATOR"
	case NodeType_STAGE:
		return "NodeType_STAGE"
	}
	return "<UNSET>"
}

func NodeTypeFromString(s string) (NodeType, error) {
	switch s {
	case "NodeType_OPERATOR":
		return NodeType_OPERATOR, nil
	case "NodeType_STAGE":
		return NodeType_STAGE, nil
	}
	return NodeType(math.MinInt32 - 1), fmt.Errorf("not a valid NodeType string")
}

type OperatorType int64

const (
	OperatorType_JOIN               OperatorType = 0
	OperatorType_MAPJOIN            OperatorType = 1
	OperatorType_EXTRACT            OperatorType = 2
	OperatorType_FILTER             OperatorType = 3
	OperatorType_FORWARD            OperatorType = 4
	OperatorType_GROUPBY            OperatorType = 5
	OperatorType_LIMIT              OperatorType = 6
	OperatorType_SCRIPT             OperatorType = 7
	OperatorType_SELECT             OperatorType = 8
	OperatorType_TABLESCAN          OperatorType = 9
	OperatorType_FILESINK           OperatorType = 10
	OperatorType_REDUCESINK         OperatorType = 11
	OperatorType_UNION              OperatorType = 12
	OperatorType_UDTF               OperatorType = 13
	OperatorType_LATERALVIEWJOIN    OperatorType = 14
	OperatorType_LATERALVIEWFORWARD OperatorType = 15
	OperatorType_HASHTABLESINK      OperatorType = 16
	OperatorType_HASHTABLEDUMMY     OperatorType = 17
)

func (p OperatorType) String() string {
	switch p {
	case OperatorType_JOIN:
		return "OperatorType_JOIN"
	case OperatorType_MAPJOIN:
		return "OperatorType_MAPJOIN"
	case OperatorType_EXTRACT:
		return "OperatorType_EXTRACT"
	case OperatorType_FILTER:
		return "OperatorType_FILTER"
	case OperatorType_FORWARD:
		return "OperatorType_FORWARD"
	case OperatorType_GROUPBY:
		return "OperatorType_GROUPBY"
	case OperatorType_LIMIT:
		return "OperatorType_LIMIT"
	case OperatorType_SCRIPT:
		return "OperatorType_SCRIPT"
	case OperatorType_SELECT:
		return "OperatorType_SELECT"
	case OperatorType_TABLESCAN:
		return "OperatorType_TABLESCAN"
	case OperatorType_FILESINK:
		return "OperatorType_FILESINK"
	case OperatorType_REDUCESINK:
		return "OperatorType_REDUCESINK"
	case OperatorType_UNION:
		return "OperatorType_UNION"
	case OperatorType_UDTF:
		return "OperatorType_UDTF"
	case OperatorType_LATERALVIEWJOIN:
		return "OperatorType_LATERALVIEWJOIN"
	case OperatorType_LATERALVIEWFORWARD:
		return "OperatorType_LATERALVIEWFORWARD"
	case OperatorType_HASHTABLESINK:
		return "OperatorType_HASHTABLESINK"
	case OperatorType_HASHTABLEDUMMY:
		return "OperatorType_HASHTABLEDUMMY"
	}
	return "<UNSET>"
}

func OperatorTypeFromString(s string) (OperatorType, error) {
	switch s {
	case "OperatorType_JOIN":
		return OperatorType_JOIN, nil
	case "OperatorType_MAPJOIN":
		return OperatorType_MAPJOIN, nil
	case "OperatorType_EXTRACT":
		return OperatorType_EXTRACT, nil
	case "OperatorType_FILTER":
		return OperatorType_FILTER, nil
	case "OperatorType_FORWARD":
		return OperatorType_FORWARD, nil
	case "OperatorType_GROUPBY":
		return OperatorType_GROUPBY, nil
	case "OperatorType_LIMIT":
		return OperatorType_LIMIT, nil
	case "OperatorType_SCRIPT":
		return OperatorType_SCRIPT, nil
	case "OperatorType_SELECT":
		return OperatorType_SELECT, nil
	case "OperatorType_TABLESCAN":
		return OperatorType_TABLESCAN, nil
	case "OperatorType_FILESINK":
		return OperatorType_FILESINK, nil
	case "OperatorType_REDUCESINK":
		return OperatorType_REDUCESINK, nil
	case "OperatorType_UNION":
		return OperatorType_UNION, nil
	case "OperatorType_UDTF":
		return OperatorType_UDTF, nil
	case "OperatorType_LATERALVIEWJOIN":
		return OperatorType_LATERALVIEWJOIN, nil
	case "OperatorType_LATERALVIEWFORWARD":
		return OperatorType_LATERALVIEWFORWARD, nil
	case "OperatorType_HASHTABLESINK":
		return OperatorType_HASHTABLESINK, nil
	case "OperatorType_HASHTABLEDUMMY":
		return OperatorType_HASHTABLEDUMMY, nil
	}
	return OperatorType(math.MinInt32 - 1), fmt.Errorf("not a valid OperatorType string")
}

type TaskType int64

const (
	TaskType_MAP    TaskType = 0
	TaskType_REDUCE TaskType = 1
	TaskType_OTHER  TaskType = 2
)

func (p TaskType) String() string {
	switch p {
	case TaskType_MAP:
		return "TaskType_MAP"
	case TaskType_REDUCE:
		return "TaskType_REDUCE"
	case TaskType_OTHER:
		return "TaskType_OTHER"
	}
	return "<UNSET>"
}

func TaskTypeFromString(s string) (TaskType, error) {
	switch s {
	case "TaskType_MAP":
		return TaskType_MAP, nil
	case "TaskType_REDUCE":
		return TaskType_REDUCE, nil
	case "TaskType_OTHER":
		return TaskType_OTHER, nil
	}
	return TaskType(math.MinInt32 - 1), fmt.Errorf("not a valid TaskType string")
}

type StageType int64

const (
	StageType_CONDITIONAL StageType = 0
	StageType_COPY        StageType = 1
	StageType_DDL         StageType = 2
	StageType_MAPRED      StageType = 3
	StageType_EXPLAIN     StageType = 4
	StageType_FETCH       StageType = 5
	StageType_FUNC        StageType = 6
	StageType_MAPREDLOCAL StageType = 7
	StageType_MOVE        StageType = 8
	StageType_STATS       StageType = 9
)

func (p StageType) String() string {
	switch p {
	case StageType_CONDITIONAL:
		return "StageType_CONDITIONAL"
	case StageType_COPY:
		return "StageType_COPY"
	case StageType_DDL:
		return "StageType_DDL"
	case StageType_MAPRED:
		return "StageType_MAPRED"
	case StageType_EXPLAIN:
		return "StageType_EXPLAIN"
	case StageType_FETCH:
		return "StageType_FETCH"
	case StageType_FUNC:
		return "StageType_FUNC"
	case StageType_MAPREDLOCAL:
		return "StageType_MAPREDLOCAL"
	case StageType_MOVE:
		return "StageType_MOVE"
	case StageType_STATS:
		return "StageType_STATS"
	}
	return "<UNSET>"
}

func StageTypeFromString(s string) (StageType, error) {
	switch s {
	case "StageType_CONDITIONAL":
		return StageType_CONDITIONAL, nil
	case "StageType_COPY":
		return StageType_COPY, nil
	case "StageType_DDL":
		return StageType_DDL, nil
	case "StageType_MAPRED":
		return StageType_MAPRED, nil
	case "StageType_EXPLAIN":
		return StageType_EXPLAIN, nil
	case "StageType_FETCH":
		return StageType_FETCH, nil
	case "StageType_FUNC":
		return StageType_FUNC, nil
	case "StageType_MAPREDLOCAL":
		return StageType_MAPREDLOCAL, nil
	case "StageType_MOVE":
		return StageType_MOVE, nil
	case "StageType_STATS":
		return StageType_STATS, nil
	}
	return StageType(math.MinInt32 - 1), fmt.Errorf("not a valid StageType string")
}

type Adjacency struct {
	Node          string        `thrift:"node,1"`
	Children      []string      `thrift:"children,2"`
	AdjacencyType AdjacencyType `thrift:"adjacencyType,3"`
}

func NewAdjacency() *Adjacency {
	return &Adjacency{
		AdjacencyType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Adjacency) IsSetAdjacencyType() bool {
	return int64(p.AdjacencyType) != math.MinInt32-1
}

func (p *Adjacency) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Adjacency) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Node = v
	}
	return nil
}

func (p *Adjacency) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Children = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = v
		}
		p.Children = append(p.Children, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Adjacency) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.AdjacencyType = AdjacencyType(v)
	}
	return nil
}

func (p *Adjacency) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Adjacency"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Adjacency) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("node", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:node: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Node)); err != nil {
		return fmt.Errorf("%T.node (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:node: %s", p, err)
	}
	return err
}

func (p *Adjacency) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Children != nil {
		if err := oprot.WriteFieldBegin("children", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:children: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Children)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Children {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:children: %s", p, err)
		}
	}
	return err
}

func (p *Adjacency) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdjacencyType() {
		if err := oprot.WriteFieldBegin("adjacencyType", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:adjacencyType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.AdjacencyType)); err != nil {
			return fmt.Errorf("%T.adjacencyType (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:adjacencyType: %s", p, err)
		}
	}
	return err
}

func (p *Adjacency) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Adjacency(%+v)", *p)
}

type Graph struct {
	NodeType      NodeType     `thrift:"nodeType,1"`
	Roots         []string     `thrift:"roots,2"`
	AdjacencyList []*Adjacency `thrift:"adjacencyList,3"`
}

func NewGraph() *Graph {
	return &Graph{
		NodeType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Graph) IsSetNodeType() bool {
	return int64(p.NodeType) != math.MinInt32-1
}

func (p *Graph) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Graph) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NodeType = NodeType(v)
	}
	return nil
}

func (p *Graph) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Roots = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem1 = v
		}
		p.Roots = append(p.Roots, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Graph) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.AdjacencyList = make([]*Adjacency, 0, size)
	for i := 0; i < size; i++ {
		_elem2 := NewAdjacency()
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2)
		}
		p.AdjacencyList = append(p.AdjacencyList, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Graph) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Graph"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Graph) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeType() {
		if err := oprot.WriteFieldBegin("nodeType", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:nodeType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.NodeType)); err != nil {
			return fmt.Errorf("%T.nodeType (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:nodeType: %s", p, err)
		}
	}
	return err
}

func (p *Graph) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Roots != nil {
		if err := oprot.WriteFieldBegin("roots", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:roots: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Roots)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Roots {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:roots: %s", p, err)
		}
	}
	return err
}

func (p *Graph) writeField3(oprot thrift.TProtocol) (err error) {
	if p.AdjacencyList != nil {
		if err := oprot.WriteFieldBegin("adjacencyList", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:adjacencyList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AdjacencyList)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.AdjacencyList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:adjacencyList: %s", p, err)
		}
	}
	return err
}

func (p *Graph) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Graph(%+v)", *p)
}

type Operator struct {
	OperatorId         string            `thrift:"operatorId,1"`
	OperatorType       OperatorType      `thrift:"operatorType,2"`
	OperatorAttributes map[string]string `thrift:"operatorAttributes,3"`
	OperatorCounters   map[string]int64  `thrift:"operatorCounters,4"`
	Done               bool              `thrift:"done,5"`
	Started            bool              `thrift:"started,6"`
}

func NewOperator() *Operator {
	return &Operator{
		OperatorType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Operator) IsSetOperatorType() bool {
	return int64(p.OperatorType) != math.MinInt32-1
}

func (p *Operator) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Operator) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.OperatorId = v
	}
	return nil
}

func (p *Operator) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.OperatorType = OperatorType(v)
	}
	return nil
}

func (p *Operator) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.OperatorAttributes = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val4 = v
		}
		p.OperatorAttributes[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Operator) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.OperatorCounters = make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key5 = v
		}
		var _val6 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val6 = v
		}
		p.OperatorCounters[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Operator) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Done = v
	}
	return nil
}

func (p *Operator) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Started = v
	}
	return nil
}

func (p *Operator) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Operator"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Operator) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatorId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:operatorId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OperatorId)); err != nil {
		return fmt.Errorf("%T.operatorId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:operatorId: %s", p, err)
	}
	return err
}

func (p *Operator) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperatorType() {
		if err := oprot.WriteFieldBegin("operatorType", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:operatorType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.OperatorType)); err != nil {
			return fmt.Errorf("%T.operatorType (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:operatorType: %s", p, err)
		}
	}
	return err
}

func (p *Operator) writeField3(oprot thrift.TProtocol) (err error) {
	if p.OperatorAttributes != nil {
		if err := oprot.WriteFieldBegin("operatorAttributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:operatorAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OperatorAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.OperatorAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:operatorAttributes: %s", p, err)
		}
	}
	return err
}

func (p *Operator) writeField4(oprot thrift.TProtocol) (err error) {
	if p.OperatorCounters != nil {
		if err := oprot.WriteFieldBegin("operatorCounters", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:operatorCounters: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.OperatorCounters)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.OperatorCounters {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:operatorCounters: %s", p, err)
		}
	}
	return err
}

func (p *Operator) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("done", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:done: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Done)); err != nil {
		return fmt.Errorf("%T.done (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:done: %s", p, err)
	}
	return err
}

func (p *Operator) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:started: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Started)); err != nil {
		return fmt.Errorf("%T.started (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:started: %s", p, err)
	}
	return err
}

func (p *Operator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Operator(%+v)", *p)
}

type Task struct {
	TaskId         string            `thrift:"taskId,1"`
	TaskType       TaskType          `thrift:"taskType,2"`
	TaskAttributes map[string]string `thrift:"taskAttributes,3"`
	TaskCounters   map[string]int64  `thrift:"taskCounters,4"`
	OperatorGraph  *Graph            `thrift:"operatorGraph,5"`
	OperatorList   []*Operator       `thrift:"operatorList,6"`
	Done           bool              `thrift:"done,7"`
	Started        bool              `thrift:"started,8"`
}

func NewTask() *Task {
	return &Task{
		TaskType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Task) IsSetTaskType() bool {
	return int64(p.TaskType) != math.MinInt32-1
}

func (p *Task) IsSetOperatorGraph() bool {
	return p.OperatorGraph != nil
}

func (p *Task) IsSetOperatorList() bool {
	return p.OperatorList != nil && len(p.OperatorList) > 0
}

func (p *Task) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Task) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *Task) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TaskType = TaskType(v)
	}
	return nil
}

func (p *Task) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.TaskAttributes = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key7 = v
		}
		var _val8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val8 = v
		}
		p.TaskAttributes[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Task) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.TaskCounters = make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key9 = v
		}
		var _val10 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val10 = v
		}
		p.TaskCounters[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Task) readField5(iprot thrift.TProtocol) error {
	p.OperatorGraph = NewGraph()
	if err := p.OperatorGraph.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.OperatorGraph)
	}
	return nil
}

func (p *Task) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.OperatorList = make([]*Operator, 0, size)
	for i := 0; i < size; i++ {
		_elem11 := NewOperator()
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11)
		}
		p.OperatorList = append(p.OperatorList, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Task) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Done = v
	}
	return nil
}

func (p *Task) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Started = v
	}
	return nil
}

func (p *Task) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Task"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Task) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:taskId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return fmt.Errorf("%T.taskId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:taskId: %s", p, err)
	}
	return err
}

func (p *Task) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskType() {
		if err := oprot.WriteFieldBegin("taskType", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:taskType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
			return fmt.Errorf("%T.taskType (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:taskType: %s", p, err)
		}
	}
	return err
}

func (p *Task) writeField3(oprot thrift.TProtocol) (err error) {
	if p.TaskAttributes != nil {
		if err := oprot.WriteFieldBegin("taskAttributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:taskAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.TaskAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.TaskAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:taskAttributes: %s", p, err)
		}
	}
	return err
}

func (p *Task) writeField4(oprot thrift.TProtocol) (err error) {
	if p.TaskCounters != nil {
		if err := oprot.WriteFieldBegin("taskCounters", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:taskCounters: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.TaskCounters)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.TaskCounters {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:taskCounters: %s", p, err)
		}
	}
	return err
}

func (p *Task) writeField5(oprot thrift.TProtocol) (err error) {
	if p.OperatorGraph != nil {
		if p.IsSetOperatorGraph() {
			if err := oprot.WriteFieldBegin("operatorGraph", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:operatorGraph: %s", p, err)
			}
			if err := p.OperatorGraph.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.OperatorGraph)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:operatorGraph: %s", p, err)
			}
		}
	}
	return err
}

func (p *Task) writeField6(oprot thrift.TProtocol) (err error) {
	if p.OperatorList != nil {
		if p.IsSetOperatorList() {
			if err := oprot.WriteFieldBegin("operatorList", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:operatorList: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OperatorList)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.OperatorList {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:operatorList: %s", p, err)
			}
		}
	}
	return err
}

func (p *Task) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("done", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:done: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Done)); err != nil {
		return fmt.Errorf("%T.done (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:done: %s", p, err)
	}
	return err
}

func (p *Task) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.BOOL, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:started: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Started)); err != nil {
		return fmt.Errorf("%T.started (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:started: %s", p, err)
	}
	return err
}

func (p *Task) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Task(%+v)", *p)
}

type Stage struct {
	StageId         string            `thrift:"stageId,1"`
	StageType       StageType         `thrift:"stageType,2"`
	StageAttributes map[string]string `thrift:"stageAttributes,3"`
	StageCounters   map[string]int64  `thrift:"stageCounters,4"`
	TaskList        []*Task           `thrift:"taskList,5"`
	Done            bool              `thrift:"done,6"`
	Started         bool              `thrift:"started,7"`
}

func NewStage() *Stage {
	return &Stage{
		StageType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Stage) IsSetStageType() bool {
	return int64(p.StageType) != math.MinInt32-1
}

func (p *Stage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Stage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StageId = v
	}
	return nil
}

func (p *Stage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.StageType = StageType(v)
	}
	return nil
}

func (p *Stage) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.StageAttributes = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key12 = v
		}
		var _val13 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val13 = v
		}
		p.StageAttributes[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Stage) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.StageCounters = make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key14 = v
		}
		var _val15 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val15 = v
		}
		p.StageCounters[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Stage) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TaskList = make([]*Task, 0, size)
	for i := 0; i < size; i++ {
		_elem16 := NewTask()
		if err := _elem16.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem16)
		}
		p.TaskList = append(p.TaskList, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Stage) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Done = v
	}
	return nil
}

func (p *Stage) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Started = v
	}
	return nil
}

func (p *Stage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Stage"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Stage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stageId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:stageId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StageId)); err != nil {
		return fmt.Errorf("%T.stageId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:stageId: %s", p, err)
	}
	return err
}

func (p *Stage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStageType() {
		if err := oprot.WriteFieldBegin("stageType", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:stageType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.StageType)); err != nil {
			return fmt.Errorf("%T.stageType (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:stageType: %s", p, err)
		}
	}
	return err
}

func (p *Stage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.StageAttributes != nil {
		if err := oprot.WriteFieldBegin("stageAttributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:stageAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StageAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.StageAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:stageAttributes: %s", p, err)
		}
	}
	return err
}

func (p *Stage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.StageCounters != nil {
		if err := oprot.WriteFieldBegin("stageCounters", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:stageCounters: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.StageCounters)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.StageCounters {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:stageCounters: %s", p, err)
		}
	}
	return err
}

func (p *Stage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.TaskList != nil {
		if err := oprot.WriteFieldBegin("taskList", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:taskList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TaskList)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.TaskList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:taskList: %s", p, err)
		}
	}
	return err
}

func (p *Stage) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("done", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:done: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Done)); err != nil {
		return fmt.Errorf("%T.done (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:done: %s", p, err)
	}
	return err
}

func (p *Stage) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:started: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Started)); err != nil {
		return fmt.Errorf("%T.started (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:started: %s", p, err)
	}
	return err
}

func (p *Stage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Stage(%+v)", *p)
}

type Query struct {
	QueryId         string            `thrift:"queryId,1"`
	QueryType       string            `thrift:"queryType,2"`
	QueryAttributes map[string]string `thrift:"queryAttributes,3"`
	QueryCounters   map[string]int64  `thrift:"queryCounters,4"`
	StageGraph      *Graph            `thrift:"stageGraph,5"`
	StageList       []*Stage          `thrift:"stageList,6"`
	Done            bool              `thrift:"done,7"`
	Started         bool              `thrift:"started,8"`
}

func NewQuery() *Query {
	return &Query{}
}

func (p *Query) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Query) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.QueryId = v
	}
	return nil
}

func (p *Query) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.QueryType = v
	}
	return nil
}

func (p *Query) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.QueryAttributes = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key17 = v
		}
		var _val18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val18 = v
		}
		p.QueryAttributes[_key17] = _val18
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Query) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.QueryCounters = make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key19 = v
		}
		var _val20 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val20 = v
		}
		p.QueryCounters[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Query) readField5(iprot thrift.TProtocol) error {
	p.StageGraph = NewGraph()
	if err := p.StageGraph.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.StageGraph)
	}
	return nil
}

func (p *Query) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.StageList = make([]*Stage, 0, size)
	for i := 0; i < size; i++ {
		_elem21 := NewStage()
		if err := _elem21.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem21)
		}
		p.StageList = append(p.StageList, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Query) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Done = v
	}
	return nil
}

func (p *Query) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Started = v
	}
	return nil
}

func (p *Query) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Query"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Query) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queryId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queryId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueryId)); err != nil {
		return fmt.Errorf("%T.queryId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queryId: %s", p, err)
	}
	return err
}

func (p *Query) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queryType", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:queryType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.QueryType)); err != nil {
		return fmt.Errorf("%T.queryType (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:queryType: %s", p, err)
	}
	return err
}

func (p *Query) writeField3(oprot thrift.TProtocol) (err error) {
	if p.QueryAttributes != nil {
		if err := oprot.WriteFieldBegin("queryAttributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:queryAttributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.QueryAttributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.QueryAttributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:queryAttributes: %s", p, err)
		}
	}
	return err
}

func (p *Query) writeField4(oprot thrift.TProtocol) (err error) {
	if p.QueryCounters != nil {
		if err := oprot.WriteFieldBegin("queryCounters", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:queryCounters: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.QueryCounters)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.QueryCounters {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:queryCounters: %s", p, err)
		}
	}
	return err
}

func (p *Query) writeField5(oprot thrift.TProtocol) (err error) {
	if p.StageGraph != nil {
		if err := oprot.WriteFieldBegin("stageGraph", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:stageGraph: %s", p, err)
		}
		if err := p.StageGraph.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.StageGraph)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:stageGraph: %s", p, err)
		}
	}
	return err
}

func (p *Query) writeField6(oprot thrift.TProtocol) (err error) {
	if p.StageList != nil {
		if err := oprot.WriteFieldBegin("stageList", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:stageList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StageList)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.StageList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:stageList: %s", p, err)
		}
	}
	return err
}

func (p *Query) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("done", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:done: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Done)); err != nil {
		return fmt.Errorf("%T.done (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:done: %s", p, err)
	}
	return err
}

func (p *Query) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.BOOL, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:started: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Started)); err != nil {
		return fmt.Errorf("%T.started (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:started: %s", p, err)
	}
	return err
}

func (p *Query) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Query(%+v)", *p)
}

type QueryPlan struct {
	Queries []*Query `thrift:"queries,1"`
	Done    bool     `thrift:"done,2"`
	Started bool     `thrift:"started,3"`
}

func NewQueryPlan() *QueryPlan {
	return &QueryPlan{}
}

func (p *QueryPlan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryPlan) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Queries = make([]*Query, 0, size)
	for i := 0; i < size; i++ {
		_elem22 := NewQuery()
		if err := _elem22.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem22)
		}
		p.Queries = append(p.Queries, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *QueryPlan) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Done = v
	}
	return nil
}

func (p *QueryPlan) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Started = v
	}
	return nil
}

func (p *QueryPlan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryPlan"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryPlan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Queries != nil {
		if err := oprot.WriteFieldBegin("queries", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:queries: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Queries)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Queries {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:queries: %s", p, err)
		}
	}
	return err
}

func (p *QueryPlan) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("done", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:done: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Done)); err != nil {
		return fmt.Errorf("%T.done (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:done: %s", p, err)
	}
	return err
}

func (p *QueryPlan) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("started", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:started: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Started)); err != nil {
		return fmt.Errorf("%T.started (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:started: %s", p, err)
	}
	return err
}

func (p *QueryPlan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPlan(%+v)", *p)
}
