// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_metastore

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/mattbaird/hive/thriftlib/fb303"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = fb303.GoUnusedProtection__

type ThriftHiveMetastore interface {
	fb303.FacebookService
	//This interface is live.

	// Parameters:
	//  - Database
	CreateDatabase(database *Database) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error)
	// Parameters:
	//  - Name
	GetDatabase(name string) (r *Database, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - Name
	//  - DeleteData
	DropDatabase(name string, deleteData bool) (o1 *NoSuchObjectException, o2 *InvalidOperationException, o3 *MetaException, err error)
	// Parameters:
	//  - Pattern
	GetDatabases(pattern string) (r []string, o1 *MetaException, err error)
	GetAllDatabases() (r []string, o1 *MetaException, err error)
	// Parameters:
	//  - Dbname
	//  - Db
	AlterDatabase(dbname string, db *Database) (o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - Name
	GetType(name string) (r *Type, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - TypeA1
	CreateType(type_a1 *Type) (r bool, o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error)
	// Parameters:
	//  - TypeA1
	DropType(type_a1 string) (r bool, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - Name
	GetTypeAll(name string) (r map[string]*Type, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetFields(db_name string, table_name string) (r []*FieldSchema, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetSchema(db_name string, table_name string) (r []*FieldSchema, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error)
	// Parameters:
	//  - Tbl
	CreateTable(tbl *Table) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, o4 *NoSuchObjectException, err error)
	// Parameters:
	//  - Dbname
	//  - Name
	//  - DeleteData
	DropTable(dbname string, name string, deleteData bool) (o1 *NoSuchObjectException, o3 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - Pattern
	GetTables(db_name string, pattern string) (r []string, o1 *MetaException, err error)
	// Parameters:
	//  - DbName
	GetAllTables(db_name string) (r []string, o1 *MetaException, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	GetTable(dbname string, tbl_name string) (r *Table, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	//  - NewTbl
	AlterTable(dbname string, tbl_name string, new_tbl *Table) (o1 *InvalidOperationException, o2 *MetaException, err error)
	// Parameters:
	//  - NewPart
	AddPartition(new_part *Partition) (r *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - DeleteData
	DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - DeleteData
	DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - UserName
	//  - GroupNames
	GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, o1 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, o1 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - Filter
	//  - MaxParts
	GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - NewPart
	AlterPartition(db_name string, tbl_name string, new_part *Partition) (o1 *InvalidOperationException, o2 *MetaException, err error)
	// Parameters:
	//  - Name
	//  - DefaultValue
	GetConfigValue(name string, defaultValue string) (r string, o1 *ConfigValSecurityException, err error)
	// Parameters:
	//  - PartName
	PartitionNameToVals(part_name string) (r []string, o1 *MetaException, err error)
	// Parameters:
	//  - PartName
	PartitionNameToSpec(part_name string) (r map[string]string, o1 *MetaException, err error)
	// Parameters:
	//  - NewIndex
	//  - IndexTable
	AddIndex(new_index *Index, index_table *Table) (r *Index, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error)
	// Parameters:
	//  - Dbname
	//  - BaseTblName
	//  - IdxName
	//  - NewIdx
	AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (o1 *InvalidOperationException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	//  - DeleteData
	DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, o1 *MetaException, o2 *NoSuchObjectException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, o1 *NoSuchObjectException, o2 *MetaException, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, o2 *MetaException, err error)
	// Parameters:
	//  - Role
	CreateRole(role *Role) (r bool, o1 *MetaException, err error)
	// Parameters:
	//  - RoleName
	DropRole(role_name string) (r bool, o1 *MetaException, err error)
	GetRoleNames() (r []string, o1 *MetaException, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	//  - Grantor
	//  - GrantorType
	//  - GrantOption
	GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, o1 *MetaException, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, o1 *MetaException, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, o1 *MetaException, err error)
	// Parameters:
	//  - HiveObject
	//  - UserName
	//  - GroupNames
	GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, o1 *MetaException, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	//  - HiveObject
	ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, o1 *MetaException, err error)
	// Parameters:
	//  - Privileges
	GrantPrivileges(privileges *PrivilegeBag) (r bool, o1 *MetaException, err error)
	// Parameters:
	//  - Privileges
	RevokePrivileges(privileges *PrivilegeBag) (r bool, o1 *MetaException, err error)
	// Parameters:
	//  - RenewerKerberosPrincipalName
	GetDelegationToken(renewer_kerberos_principal_name string) (r string, o1 *MetaException, err error)
	// Parameters:
	//  - RenewerKerberosPrincipalName
	//  - TokenSignature
	GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (r string, o1 *MetaException, err error)
	// Parameters:
	//  - TokenStrForm
	RenewDelegationToken(token_str_form string) (r int64, o1 *MetaException, err error)
	// Parameters:
	//  - TokenStrForm
	CancelDelegationToken(token_str_form string) (o1 *MetaException, err error)
}

//This interface is live.
type ThriftHiveMetastoreClient struct {
	*fb303.FacebookServiceClient
}

func NewThriftHiveMetastoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientFactory(t, f)}
}

func NewThriftHiveMetastoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Database
func (p *ThriftHiveMetastoreClient) CreateDatabase(database *Database) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
	if err = p.sendCreateDatabase(database); err != nil {
		return
	}
	return p.recvCreateDatabase()
}

func (p *ThriftHiveMetastoreClient) sendCreateDatabase(database *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("create_database", thrift.CALL, p.SeqId)
	args32 := NewCreateDatabaseArgs()
	args32.Database = database
	err = args32.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvCreateDatabase() (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result33 := NewCreateDatabaseResult()
	err = result33.Read(iprot)
	iprot.ReadMessageEnd()
	if result33.O1 != nil {
		o1 = result33.O1
	}
	if result33.O2 != nil {
		o2 = result33.O2
	}
	if result33.O3 != nil {
		o3 = result33.O3
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetDatabase(name string) (r *Database, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendGetDatabase(name); err != nil {
		return
	}
	return p.recvGetDatabase()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabase(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_database", thrift.CALL, p.SeqId)
	args36 := NewGetDatabaseArgs()
	args36.Name = name
	err = args36.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetDatabase() (value *Database, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result37 := NewGetDatabaseResult()
	err = result37.Read(iprot)
	iprot.ReadMessageEnd()
	value = result37.Success
	if result37.O1 != nil {
		o1 = result37.O1
	}
	if result37.O2 != nil {
		o2 = result37.O2
	}
	return
}

// Parameters:
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropDatabase(name string, deleteData bool) (o1 *NoSuchObjectException, o2 *InvalidOperationException, o3 *MetaException, err error) {
	if err = p.sendDropDatabase(name, deleteData); err != nil {
		return
	}
	return p.recvDropDatabase()
}

func (p *ThriftHiveMetastoreClient) sendDropDatabase(name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("drop_database", thrift.CALL, p.SeqId)
	args40 := NewDropDatabaseArgs()
	args40.Name = name
	args40.DeleteData = deleteData
	err = args40.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvDropDatabase() (o1 *NoSuchObjectException, o2 *InvalidOperationException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result41 := NewDropDatabaseResult()
	err = result41.Read(iprot)
	iprot.ReadMessageEnd()
	if result41.O1 != nil {
		o1 = result41.O1
	}
	if result41.O2 != nil {
		o2 = result41.O2
	}
	if result41.O3 != nil {
		o3 = result41.O3
	}
	return
}

// Parameters:
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetDatabases(pattern string) (r []string, o1 *MetaException, err error) {
	if err = p.sendGetDatabases(pattern); err != nil {
		return
	}
	return p.recvGetDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabases(pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_databases", thrift.CALL, p.SeqId)
	args44 := NewGetDatabasesArgs()
	args44.Pattern = pattern
	err = args44.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetDatabases() (value []string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result45 := NewGetDatabasesResult()
	err = result45.Read(iprot)
	iprot.ReadMessageEnd()
	value = result45.Success
	if result45.O1 != nil {
		o1 = result45.O1
	}
	return
}

func (p *ThriftHiveMetastoreClient) GetAllDatabases() (r []string, o1 *MetaException, err error) {
	if err = p.sendGetAllDatabases(); err != nil {
		return
	}
	return p.recvGetAllDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetAllDatabases() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_all_databases", thrift.CALL, p.SeqId)
	args48 := NewGetAllDatabasesArgs()
	err = args48.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetAllDatabases() (value []string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result49 := NewGetAllDatabasesResult()
	err = result49.Read(iprot)
	iprot.ReadMessageEnd()
	value = result49.Success
	if result49.O1 != nil {
		o1 = result49.O1
	}
	return
}

// Parameters:
//  - Dbname
//  - Db
func (p *ThriftHiveMetastoreClient) AlterDatabase(dbname string, db *Database) (o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendAlterDatabase(dbname, db); err != nil {
		return
	}
	return p.recvAlterDatabase()
}

func (p *ThriftHiveMetastoreClient) sendAlterDatabase(dbname string, db *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("alter_database", thrift.CALL, p.SeqId)
	args52 := NewAlterDatabaseArgs()
	args52.Dbname = dbname
	args52.Db = db
	err = args52.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAlterDatabase() (o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result53 := NewAlterDatabaseResult()
	err = result53.Read(iprot)
	iprot.ReadMessageEnd()
	if result53.O1 != nil {
		o1 = result53.O1
	}
	if result53.O2 != nil {
		o2 = result53.O2
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetType(name string) (r *Type, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendGetType(name); err != nil {
		return
	}
	return p.recvGetType()
}

func (p *ThriftHiveMetastoreClient) sendGetType(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_type", thrift.CALL, p.SeqId)
	args56 := NewGetTypeArgs()
	args56.Name = name
	err = args56.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetType() (value *Type, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result57 := NewGetTypeResult()
	err = result57.Read(iprot)
	iprot.ReadMessageEnd()
	value = result57.Success
	if result57.O1 != nil {
		o1 = result57.O1
	}
	if result57.O2 != nil {
		o2 = result57.O2
	}
	return
}

// Parameters:
//  - TypeA1
func (p *ThriftHiveMetastoreClient) CreateType(type_a1 *Type) (r bool, o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
	if err = p.sendCreateType(type_a1); err != nil {
		return
	}
	return p.recvCreateType()
}

func (p *ThriftHiveMetastoreClient) sendCreateType(type_a1 *Type) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("create_type", thrift.CALL, p.SeqId)
	args60 := NewCreateTypeArgs()
	args60.TypeA1 = type_a1
	err = args60.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvCreateType() (value bool, o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result61 := NewCreateTypeResult()
	err = result61.Read(iprot)
	iprot.ReadMessageEnd()
	value = result61.Success
	if result61.O1 != nil {
		o1 = result61.O1
	}
	if result61.O2 != nil {
		o2 = result61.O2
	}
	if result61.O3 != nil {
		o3 = result61.O3
	}
	return
}

// Parameters:
//  - TypeA1
func (p *ThriftHiveMetastoreClient) DropType(type_a1 string) (r bool, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendDropType(type_a1); err != nil {
		return
	}
	return p.recvDropType()
}

func (p *ThriftHiveMetastoreClient) sendDropType(type_a1 string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("drop_type", thrift.CALL, p.SeqId)
	args64 := NewDropTypeArgs()
	args64.TypeA1 = type_a1
	err = args64.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvDropType() (value bool, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result65 := NewDropTypeResult()
	err = result65.Read(iprot)
	iprot.ReadMessageEnd()
	value = result65.Success
	if result65.O1 != nil {
		o1 = result65.O1
	}
	if result65.O2 != nil {
		o2 = result65.O2
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetTypeAll(name string) (r map[string]*Type, o2 *MetaException, err error) {
	if err = p.sendGetTypeAll(name); err != nil {
		return
	}
	return p.recvGetTypeAll()
}

func (p *ThriftHiveMetastoreClient) sendGetTypeAll(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_type_all", thrift.CALL, p.SeqId)
	args68 := NewGetTypeAllArgs()
	args68.Name = name
	err = args68.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetTypeAll() (value map[string]*Type, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result69 := NewGetTypeAllResult()
	err = result69.Read(iprot)
	iprot.ReadMessageEnd()
	value = result69.Success
	if result69.O2 != nil {
		o2 = result69.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetFields(db_name string, table_name string) (r []*FieldSchema, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
	if err = p.sendGetFields(db_name, table_name); err != nil {
		return
	}
	return p.recvGetFields()
}

func (p *ThriftHiveMetastoreClient) sendGetFields(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_fields", thrift.CALL, p.SeqId)
	args72 := NewGetFieldsArgs()
	args72.DbName = db_name
	args72.TableName = table_name
	err = args72.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetFields() (value []*FieldSchema, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result73 := NewGetFieldsResult()
	err = result73.Read(iprot)
	iprot.ReadMessageEnd()
	value = result73.Success
	if result73.O1 != nil {
		o1 = result73.O1
	}
	if result73.O2 != nil {
		o2 = result73.O2
	}
	if result73.O3 != nil {
		o3 = result73.O3
	}
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetSchema(db_name string, table_name string) (r []*FieldSchema, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
	if err = p.sendGetSchema(db_name, table_name); err != nil {
		return
	}
	return p.recvGetSchema()
}

func (p *ThriftHiveMetastoreClient) sendGetSchema(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_schema", thrift.CALL, p.SeqId)
	args76 := NewGetSchemaArgs()
	args76.DbName = db_name
	args76.TableName = table_name
	err = args76.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetSchema() (value []*FieldSchema, o1 *MetaException, o2 *UnknownTableException, o3 *UnknownDBException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result77 := NewGetSchemaResult()
	err = result77.Read(iprot)
	iprot.ReadMessageEnd()
	value = result77.Success
	if result77.O1 != nil {
		o1 = result77.O1
	}
	if result77.O2 != nil {
		o2 = result77.O2
	}
	if result77.O3 != nil {
		o3 = result77.O3
	}
	return
}

// Parameters:
//  - Tbl
func (p *ThriftHiveMetastoreClient) CreateTable(tbl *Table) (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, o4 *NoSuchObjectException, err error) {
	if err = p.sendCreateTable(tbl); err != nil {
		return
	}
	return p.recvCreateTable()
}

func (p *ThriftHiveMetastoreClient) sendCreateTable(tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("create_table", thrift.CALL, p.SeqId)
	args80 := NewCreateTableArgs()
	args80.Tbl = tbl
	err = args80.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvCreateTable() (o1 *AlreadyExistsException, o2 *InvalidObjectException, o3 *MetaException, o4 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result81 := NewCreateTableResult()
	err = result81.Read(iprot)
	iprot.ReadMessageEnd()
	if result81.O1 != nil {
		o1 = result81.O1
	}
	if result81.O2 != nil {
		o2 = result81.O2
	}
	if result81.O3 != nil {
		o3 = result81.O3
	}
	if result81.O4 != nil {
		o4 = result81.O4
	}
	return
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropTable(dbname string, name string, deleteData bool) (o1 *NoSuchObjectException, o3 *MetaException, err error) {
	if err = p.sendDropTable(dbname, name, deleteData); err != nil {
		return
	}
	return p.recvDropTable()
}

func (p *ThriftHiveMetastoreClient) sendDropTable(dbname string, name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("drop_table", thrift.CALL, p.SeqId)
	args84 := NewDropTableArgs()
	args84.Dbname = dbname
	args84.Name = name
	args84.DeleteData = deleteData
	err = args84.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvDropTable() (o1 *NoSuchObjectException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result85 := NewDropTableResult()
	err = result85.Read(iprot)
	iprot.ReadMessageEnd()
	if result85.O1 != nil {
		o1 = result85.O1
	}
	if result85.O3 != nil {
		o3 = result85.O3
	}
	return
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetTables(db_name string, pattern string) (r []string, o1 *MetaException, err error) {
	if err = p.sendGetTables(db_name, pattern); err != nil {
		return
	}
	return p.recvGetTables()
}

func (p *ThriftHiveMetastoreClient) sendGetTables(db_name string, pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_tables", thrift.CALL, p.SeqId)
	args88 := NewGetTablesArgs()
	args88.DbName = db_name
	args88.Pattern = pattern
	err = args88.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetTables() (value []string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result89 := NewGetTablesResult()
	err = result89.Read(iprot)
	iprot.ReadMessageEnd()
	value = result89.Success
	if result89.O1 != nil {
		o1 = result89.O1
	}
	return
}

// Parameters:
//  - DbName
func (p *ThriftHiveMetastoreClient) GetAllTables(db_name string) (r []string, o1 *MetaException, err error) {
	if err = p.sendGetAllTables(db_name); err != nil {
		return
	}
	return p.recvGetAllTables()
}

func (p *ThriftHiveMetastoreClient) sendGetAllTables(db_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_all_tables", thrift.CALL, p.SeqId)
	args92 := NewGetAllTablesArgs()
	args92.DbName = db_name
	err = args92.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetAllTables() (value []string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result93 := NewGetAllTablesResult()
	err = result93.Read(iprot)
	iprot.ReadMessageEnd()
	value = result93.Success
	if result93.O1 != nil {
		o1 = result93.O1
	}
	return
}

// Parameters:
//  - Dbname
//  - TblName
func (p *ThriftHiveMetastoreClient) GetTable(dbname string, tbl_name string) (r *Table, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendGetTable(dbname, tbl_name); err != nil {
		return
	}
	return p.recvGetTable()
}

func (p *ThriftHiveMetastoreClient) sendGetTable(dbname string, tbl_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_table", thrift.CALL, p.SeqId)
	args96 := NewGetTableArgs()
	args96.Dbname = dbname
	args96.TblName = tbl_name
	err = args96.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetTable() (value *Table, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result97 := NewGetTableResult()
	err = result97.Read(iprot)
	iprot.ReadMessageEnd()
	value = result97.Success
	if result97.O1 != nil {
		o1 = result97.O1
	}
	if result97.O2 != nil {
		o2 = result97.O2
	}
	return
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl
func (p *ThriftHiveMetastoreClient) AlterTable(dbname string, tbl_name string, new_tbl *Table) (o1 *InvalidOperationException, o2 *MetaException, err error) {
	if err = p.sendAlterTable(dbname, tbl_name, new_tbl); err != nil {
		return
	}
	return p.recvAlterTable()
}

func (p *ThriftHiveMetastoreClient) sendAlterTable(dbname string, tbl_name string, new_tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("alter_table", thrift.CALL, p.SeqId)
	args100 := NewAlterTableArgs()
	args100.Dbname = dbname
	args100.TblName = tbl_name
	args100.NewTbl = new_tbl
	err = args100.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAlterTable() (o1 *InvalidOperationException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result101 := NewAlterTableResult()
	err = result101.Read(iprot)
	iprot.ReadMessageEnd()
	if result101.O1 != nil {
		o1 = result101.O1
	}
	if result101.O2 != nil {
		o2 = result101.O2
	}
	return
}

// Parameters:
//  - NewPart
func (p *ThriftHiveMetastoreClient) AddPartition(new_part *Partition) (r *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	if err = p.sendAddPartition(new_part); err != nil {
		return
	}
	return p.recvAddPartition()
}

func (p *ThriftHiveMetastoreClient) sendAddPartition(new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("add_partition", thrift.CALL, p.SeqId)
	args104 := NewAddPartitionArgs()
	args104.NewPart = new_part
	err = args104.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAddPartition() (value *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result105 := NewAddPartitionResult()
	err = result105.Read(iprot)
	iprot.ReadMessageEnd()
	value = result105.Success
	if result105.O1 != nil {
		o1 = result105.O1
	}
	if result105.O2 != nil {
		o2 = result105.O2
	}
	if result105.O3 != nil {
		o3 = result105.O3
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	if err = p.sendAppendPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvAppendPartition()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("append_partition", thrift.CALL, p.SeqId)
	args108 := NewAppendPartitionArgs()
	args108.DbName = db_name
	args108.TblName = tbl_name
	args108.PartVals = part_vals
	err = args108.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAppendPartition() (value *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result109 := NewAppendPartitionResult()
	err = result109.Read(iprot)
	iprot.ReadMessageEnd()
	value = result109.Success
	if result109.O1 != nil {
		o1 = result109.O1
	}
	if result109.O2 != nil {
		o2 = result109.O2
	}
	if result109.O3 != nil {
		o3 = result109.O3
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	if err = p.sendAppendPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvAppendPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("append_partition_by_name", thrift.CALL, p.SeqId)
	args112 := NewAppendPartitionByNameArgs()
	args112.DbName = db_name
	args112.TblName = tbl_name
	args112.PartName = part_name
	err = args112.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAppendPartitionByName() (value *Partition, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result113 := NewAppendPartitionByNameResult()
	err = result113.Read(iprot)
	iprot.ReadMessageEnd()
	value = result113.Success
	if result113.O1 != nil {
		o1 = result113.O1
	}
	if result113.O2 != nil {
		o2 = result113.O2
	}
	if result113.O3 != nil {
		o3 = result113.O3
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendDropPartition(db_name, tbl_name, part_vals, deleteData); err != nil {
		return
	}
	return p.recvDropPartition()
}

func (p *ThriftHiveMetastoreClient) sendDropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("drop_partition", thrift.CALL, p.SeqId)
	args116 := NewDropPartitionArgs()
	args116.DbName = db_name
	args116.TblName = tbl_name
	args116.PartVals = part_vals
	args116.DeleteData = deleteData
	err = args116.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvDropPartition() (value bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result117 := NewDropPartitionResult()
	err = result117.Read(iprot)
	iprot.ReadMessageEnd()
	value = result117.Success
	if result117.O1 != nil {
		o1 = result117.O1
	}
	if result117.O2 != nil {
		o2 = result117.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendDropPartitionByName(db_name, tbl_name, part_name, deleteData); err != nil {
		return
	}
	return p.recvDropPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendDropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("drop_partition_by_name", thrift.CALL, p.SeqId)
	args120 := NewDropPartitionByNameArgs()
	args120.DbName = db_name
	args120.TblName = tbl_name
	args120.PartName = part_name
	args120.DeleteData = deleteData
	err = args120.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvDropPartitionByName() (value bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result121 := NewDropPartitionByNameResult()
	err = result121.Read(iprot)
	iprot.ReadMessageEnd()
	value = result121.Success
	if result121.O1 != nil {
		o1 = result121.O1
	}
	if result121.O2 != nil {
		o2 = result121.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendGetPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvGetPartition()
}

func (p *ThriftHiveMetastoreClient) sendGetPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partition", thrift.CALL, p.SeqId)
	args124 := NewGetPartitionArgs()
	args124.DbName = db_name
	args124.TblName = tbl_name
	args124.PartVals = part_vals
	err = args124.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartition() (value *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result125 := NewGetPartitionResult()
	err = result125.Read(iprot)
	iprot.ReadMessageEnd()
	value = result125.Success
	if result125.O1 != nil {
		o1 = result125.O1
	}
	if result125.O2 != nil {
		o2 = result125.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendGetPartitionWithAuth(db_name, tbl_name, part_vals, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partition_with_auth", thrift.CALL, p.SeqId)
	args128 := NewGetPartitionWithAuthArgs()
	args128.DbName = db_name
	args128.TblName = tbl_name
	args128.PartVals = part_vals
	args128.UserName = user_name
	args128.GroupNames = group_names
	err = args128.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionWithAuth() (value *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result129 := NewGetPartitionWithAuthResult()
	err = result129.Read(iprot)
	iprot.ReadMessageEnd()
	value = result129.Success
	if result129.O1 != nil {
		o1 = result129.O1
	}
	if result129.O2 != nil {
		o2 = result129.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendGetPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvGetPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partition_by_name", thrift.CALL, p.SeqId)
	args132 := NewGetPartitionByNameArgs()
	args132.DbName = db_name
	args132.TblName = tbl_name
	args132.PartName = part_name
	err = args132.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionByName() (value *Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result133 := NewGetPartitionByNameResult()
	err = result133.Read(iprot)
	iprot.ReadMessageEnd()
	value = result133.Success
	if result133.O1 != nil {
		o1 = result133.O1
	}
	if result133.O2 != nil {
		o2 = result133.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendGetPartitions(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitions()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitions(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partitions", thrift.CALL, p.SeqId)
	args136 := NewGetPartitionsArgs()
	args136.DbName = db_name
	args136.TblName = tbl_name
	args136.MaxParts = max_parts
	err = args136.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitions() (value []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result137 := NewGetPartitionsResult()
	err = result137.Read(iprot)
	iprot.ReadMessageEnd()
	value = result137.Success
	if result137.O1 != nil {
		o1 = result137.O1
	}
	if result137.O2 != nil {
		o2 = result137.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendGetPartitionsWithAuth(db_name, tbl_name, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partitions_with_auth", thrift.CALL, p.SeqId)
	args140 := NewGetPartitionsWithAuthArgs()
	args140.DbName = db_name
	args140.TblName = tbl_name
	args140.MaxParts = max_parts
	args140.UserName = user_name
	args140.GroupNames = group_names
	err = args140.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsWithAuth() (value []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result141 := NewGetPartitionsWithAuthResult()
	err = result141.Read(iprot)
	iprot.ReadMessageEnd()
	value = result141.Success
	if result141.O1 != nil {
		o1 = result141.O1
	}
	if result141.O2 != nil {
		o2 = result141.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, o2 *MetaException, err error) {
	if err = p.sendGetPartitionNames(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNames()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNames(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partition_names", thrift.CALL, p.SeqId)
	args144 := NewGetPartitionNamesArgs()
	args144.DbName = db_name
	args144.TblName = tbl_name
	args144.MaxParts = max_parts
	err = args144.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNames() (value []string, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result145 := NewGetPartitionNamesResult()
	err = result145.Read(iprot)
	iprot.ReadMessageEnd()
	value = result145.Success
	if result145.O2 != nil {
		o2 = result145.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, o1 *MetaException, err error) {
	if err = p.sendGetPartitionsPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partitions_ps", thrift.CALL, p.SeqId)
	args148 := NewGetPartitionsPsArgs()
	args148.DbName = db_name
	args148.TblName = tbl_name
	args148.PartVals = part_vals
	args148.MaxParts = max_parts
	err = args148.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPs() (value []*Partition, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error150 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error151 error
		error151, err = error150.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error151
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result149 := NewGetPartitionsPsResult()
	err = result149.Read(iprot)
	iprot.ReadMessageEnd()
	value = result149.Success
	if result149.O1 != nil {
		o1 = result149.O1
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendGetPartitionsPsWithAuth(db_name, tbl_name, part_vals, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsPsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.CALL, p.SeqId)
	args152 := NewGetPartitionsPsWithAuthArgs()
	args152.DbName = db_name
	args152.TblName = tbl_name
	args152.PartVals = part_vals
	args152.MaxParts = max_parts
	args152.UserName = user_name
	args152.GroupNames = group_names
	err = args152.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPsWithAuth() (value []*Partition, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error154 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error155 error
		error155, err = error154.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error155
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result153 := NewGetPartitionsPsWithAuthResult()
	err = result153.Read(iprot)
	iprot.ReadMessageEnd()
	value = result153.Success
	if result153.O1 != nil {
		o1 = result153.O1
	}
	if result153.O2 != nil {
		o2 = result153.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, o1 *MetaException, err error) {
	if err = p.sendGetPartitionNamesPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNamesPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partition_names_ps", thrift.CALL, p.SeqId)
	args156 := NewGetPartitionNamesPsArgs()
	args156.DbName = db_name
	args156.TblName = tbl_name
	args156.PartVals = part_vals
	args156.MaxParts = max_parts
	err = args156.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNamesPs() (value []string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error158 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error159 error
		error159, err = error158.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error159
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result157 := NewGetPartitionNamesPsResult()
	err = result157.Read(iprot)
	iprot.ReadMessageEnd()
	value = result157.Success
	if result157.O1 != nil {
		o1 = result157.O1
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendGetPartitionsByFilter(db_name, tbl_name, filter, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsByFilter()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_partitions_by_filter", thrift.CALL, p.SeqId)
	args160 := NewGetPartitionsByFilterArgs()
	args160.DbName = db_name
	args160.TblName = tbl_name
	args160.Filter = filter
	args160.MaxParts = max_parts
	err = args160.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsByFilter() (value []*Partition, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result161 := NewGetPartitionsByFilterResult()
	err = result161.Read(iprot)
	iprot.ReadMessageEnd()
	value = result161.Success
	if result161.O1 != nil {
		o1 = result161.O1
	}
	if result161.O2 != nil {
		o2 = result161.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart
func (p *ThriftHiveMetastoreClient) AlterPartition(db_name string, tbl_name string, new_part *Partition) (o1 *InvalidOperationException, o2 *MetaException, err error) {
	if err = p.sendAlterPartition(db_name, tbl_name, new_part); err != nil {
		return
	}
	return p.recvAlterPartition()
}

func (p *ThriftHiveMetastoreClient) sendAlterPartition(db_name string, tbl_name string, new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("alter_partition", thrift.CALL, p.SeqId)
	args164 := NewAlterPartitionArgs()
	args164.DbName = db_name
	args164.TblName = tbl_name
	args164.NewPart = new_part
	err = args164.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAlterPartition() (o1 *InvalidOperationException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result165 := NewAlterPartitionResult()
	err = result165.Read(iprot)
	iprot.ReadMessageEnd()
	if result165.O1 != nil {
		o1 = result165.O1
	}
	if result165.O2 != nil {
		o2 = result165.O2
	}
	return
}

// Parameters:
//  - Name
//  - DefaultValue
func (p *ThriftHiveMetastoreClient) GetConfigValue(name string, defaultValue string) (r string, o1 *ConfigValSecurityException, err error) {
	if err = p.sendGetConfigValue(name, defaultValue); err != nil {
		return
	}
	return p.recvGetConfigValue()
}

func (p *ThriftHiveMetastoreClient) sendGetConfigValue(name string, defaultValue string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_config_value", thrift.CALL, p.SeqId)
	args168 := NewGetConfigValueArgs()
	args168.Name = name
	args168.DefaultValue = defaultValue
	err = args168.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetConfigValue() (value string, o1 *ConfigValSecurityException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result169 := NewGetConfigValueResult()
	err = result169.Read(iprot)
	iprot.ReadMessageEnd()
	value = result169.Success
	if result169.O1 != nil {
		o1 = result169.O1
	}
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToVals(part_name string) (r []string, o1 *MetaException, err error) {
	if err = p.sendPartitionNameToVals(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToVals()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToVals(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("partition_name_to_vals", thrift.CALL, p.SeqId)
	args172 := NewPartitionNameToValsArgs()
	args172.PartName = part_name
	err = args172.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToVals() (value []string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error174 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error175 error
		error175, err = error174.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error175
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result173 := NewPartitionNameToValsResult()
	err = result173.Read(iprot)
	iprot.ReadMessageEnd()
	value = result173.Success
	if result173.O1 != nil {
		o1 = result173.O1
	}
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToSpec(part_name string) (r map[string]string, o1 *MetaException, err error) {
	if err = p.sendPartitionNameToSpec(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToSpec()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToSpec(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("partition_name_to_spec", thrift.CALL, p.SeqId)
	args176 := NewPartitionNameToSpecArgs()
	args176.PartName = part_name
	err = args176.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToSpec() (value map[string]string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error178 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error179 error
		error179, err = error178.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error179
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result177 := NewPartitionNameToSpecResult()
	err = result177.Read(iprot)
	iprot.ReadMessageEnd()
	value = result177.Success
	if result177.O1 != nil {
		o1 = result177.O1
	}
	return
}

// Parameters:
//  - NewIndex
//  - IndexTable
func (p *ThriftHiveMetastoreClient) AddIndex(new_index *Index, index_table *Table) (r *Index, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	if err = p.sendAddIndex(new_index, index_table); err != nil {
		return
	}
	return p.recvAddIndex()
}

func (p *ThriftHiveMetastoreClient) sendAddIndex(new_index *Index, index_table *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("add_index", thrift.CALL, p.SeqId)
	args180 := NewAddIndexArgs()
	args180.NewIndex = new_index
	args180.IndexTable = index_table
	err = args180.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAddIndex() (value *Index, o1 *InvalidObjectException, o2 *AlreadyExistsException, o3 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error182 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error183 error
		error183, err = error182.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error183
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result181 := NewAddIndexResult()
	err = result181.Read(iprot)
	iprot.ReadMessageEnd()
	value = result181.Success
	if result181.O1 != nil {
		o1 = result181.O1
	}
	if result181.O2 != nil {
		o2 = result181.O2
	}
	if result181.O3 != nil {
		o3 = result181.O3
	}
	return
}

// Parameters:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx
func (p *ThriftHiveMetastoreClient) AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (o1 *InvalidOperationException, o2 *MetaException, err error) {
	if err = p.sendAlterIndex(dbname, base_tbl_name, idx_name, new_idx); err != nil {
		return
	}
	return p.recvAlterIndex()
}

func (p *ThriftHiveMetastoreClient) sendAlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("alter_index", thrift.CALL, p.SeqId)
	args184 := NewAlterIndexArgs()
	args184.Dbname = dbname
	args184.BaseTblName = base_tbl_name
	args184.IdxName = idx_name
	args184.NewIdx = new_idx
	err = args184.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvAlterIndex() (o1 *InvalidOperationException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error186 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error187 error
		error187, err = error186.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error187
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result185 := NewAlterIndexResult()
	err = result185.Read(iprot)
	iprot.ReadMessageEnd()
	if result185.O1 != nil {
		o1 = result185.O1
	}
	if result185.O2 != nil {
		o2 = result185.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendDropIndexByName(db_name, tbl_name, index_name, deleteData); err != nil {
		return
	}
	return p.recvDropIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendDropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("drop_index_by_name", thrift.CALL, p.SeqId)
	args188 := NewDropIndexByNameArgs()
	args188.DbName = db_name
	args188.TblName = tbl_name
	args188.IndexName = index_name
	args188.DeleteData = deleteData
	err = args188.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvDropIndexByName() (value bool, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error190 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error191 error
		error191, err = error190.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error191
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result189 := NewDropIndexByNameResult()
	err = result189.Read(iprot)
	iprot.ReadMessageEnd()
	value = result189.Success
	if result189.O1 != nil {
		o1 = result189.O1
	}
	if result189.O2 != nil {
		o2 = result189.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
func (p *ThriftHiveMetastoreClient) GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	if err = p.sendGetIndexByName(db_name, tbl_name, index_name); err != nil {
		return
	}
	return p.recvGetIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexByName(db_name string, tbl_name string, index_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_index_by_name", thrift.CALL, p.SeqId)
	args192 := NewGetIndexByNameArgs()
	args192.DbName = db_name
	args192.TblName = tbl_name
	args192.IndexName = index_name
	err = args192.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetIndexByName() (value *Index, o1 *MetaException, o2 *NoSuchObjectException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error194 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error195 error
		error195, err = error194.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error195
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result193 := NewGetIndexByNameResult()
	err = result193.Read(iprot)
	iprot.ReadMessageEnd()
	value = result193.Success
	if result193.O1 != nil {
		o1 = result193.O1
	}
	if result193.O2 != nil {
		o2 = result193.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	if err = p.sendGetIndexes(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexes()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexes(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_indexes", thrift.CALL, p.SeqId)
	args196 := NewGetIndexesArgs()
	args196.DbName = db_name
	args196.TblName = tbl_name
	args196.MaxIndexes = max_indexes
	err = args196.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetIndexes() (value []*Index, o1 *NoSuchObjectException, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error198 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error199 error
		error199, err = error198.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error199
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result197 := NewGetIndexesResult()
	err = result197.Read(iprot)
	iprot.ReadMessageEnd()
	value = result197.Success
	if result197.O1 != nil {
		o1 = result197.O1
	}
	if result197.O2 != nil {
		o2 = result197.O2
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, o2 *MetaException, err error) {
	if err = p.sendGetIndexNames(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexNames()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexNames(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_index_names", thrift.CALL, p.SeqId)
	args200 := NewGetIndexNamesArgs()
	args200.DbName = db_name
	args200.TblName = tbl_name
	args200.MaxIndexes = max_indexes
	err = args200.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetIndexNames() (value []string, o2 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error202 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error203 error
		error203, err = error202.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error203
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result201 := NewGetIndexNamesResult()
	err = result201.Read(iprot)
	iprot.ReadMessageEnd()
	value = result201.Success
	if result201.O2 != nil {
		o2 = result201.O2
	}
	return
}

// Parameters:
//  - Role
func (p *ThriftHiveMetastoreClient) CreateRole(role *Role) (r bool, o1 *MetaException, err error) {
	if err = p.sendCreateRole(role); err != nil {
		return
	}
	return p.recvCreateRole()
}

func (p *ThriftHiveMetastoreClient) sendCreateRole(role *Role) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("create_role", thrift.CALL, p.SeqId)
	args204 := NewCreateRoleArgs()
	args204.Role = role
	err = args204.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvCreateRole() (value bool, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error206 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error207 error
		error207, err = error206.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error207
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result205 := NewCreateRoleResult()
	err = result205.Read(iprot)
	iprot.ReadMessageEnd()
	value = result205.Success
	if result205.O1 != nil {
		o1 = result205.O1
	}
	return
}

// Parameters:
//  - RoleName
func (p *ThriftHiveMetastoreClient) DropRole(role_name string) (r bool, o1 *MetaException, err error) {
	if err = p.sendDropRole(role_name); err != nil {
		return
	}
	return p.recvDropRole()
}

func (p *ThriftHiveMetastoreClient) sendDropRole(role_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("drop_role", thrift.CALL, p.SeqId)
	args208 := NewDropRoleArgs()
	args208.RoleName = role_name
	err = args208.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvDropRole() (value bool, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error210 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error211 error
		error211, err = error210.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error211
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result209 := NewDropRoleResult()
	err = result209.Read(iprot)
	iprot.ReadMessageEnd()
	value = result209.Success
	if result209.O1 != nil {
		o1 = result209.O1
	}
	return
}

func (p *ThriftHiveMetastoreClient) GetRoleNames() (r []string, o1 *MetaException, err error) {
	if err = p.sendGetRoleNames(); err != nil {
		return
	}
	return p.recvGetRoleNames()
}

func (p *ThriftHiveMetastoreClient) sendGetRoleNames() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_role_names", thrift.CALL, p.SeqId)
	args212 := NewGetRoleNamesArgs()
	err = args212.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetRoleNames() (value []string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error214 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error215 error
		error215, err = error214.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error215
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result213 := NewGetRoleNamesResult()
	err = result213.Read(iprot)
	iprot.ReadMessageEnd()
	value = result213.Success
	if result213.O1 != nil {
		o1 = result213.O1
	}
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
func (p *ThriftHiveMetastoreClient) GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, o1 *MetaException, err error) {
	if err = p.sendGrantRole(role_name, principal_name, principal_type, grantor, grantorType, grant_option); err != nil {
		return
	}
	return p.recvGrantRole()
}

func (p *ThriftHiveMetastoreClient) sendGrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("grant_role", thrift.CALL, p.SeqId)
	args216 := NewGrantRoleArgs()
	args216.RoleName = role_name
	args216.PrincipalName = principal_name
	args216.PrincipalType = principal_type
	args216.Grantor = grantor
	args216.GrantorType = grantorType
	args216.GrantOption = grant_option
	err = args216.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGrantRole() (value bool, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error218 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error219 error
		error219, err = error218.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error219
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result217 := NewGrantRoleResult()
	err = result217.Read(iprot)
	iprot.ReadMessageEnd()
	value = result217.Success
	if result217.O1 != nil {
		o1 = result217.O1
	}
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, o1 *MetaException, err error) {
	if err = p.sendRevokeRole(role_name, principal_name, principal_type); err != nil {
		return
	}
	return p.recvRevokeRole()
}

func (p *ThriftHiveMetastoreClient) sendRevokeRole(role_name string, principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("revoke_role", thrift.CALL, p.SeqId)
	args220 := NewRevokeRoleArgs()
	args220.RoleName = role_name
	args220.PrincipalName = principal_name
	args220.PrincipalType = principal_type
	err = args220.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvRevokeRole() (value bool, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error222 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error223 error
		error223, err = error222.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error223
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result221 := NewRevokeRoleResult()
	err = result221.Read(iprot)
	iprot.ReadMessageEnd()
	value = result221.Success
	if result221.O1 != nil {
		o1 = result221.O1
	}
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, o1 *MetaException, err error) {
	if err = p.sendListRoles(principal_name, principal_type); err != nil {
		return
	}
	return p.recvListRoles()
}

func (p *ThriftHiveMetastoreClient) sendListRoles(principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("list_roles", thrift.CALL, p.SeqId)
	args224 := NewListRolesArgs()
	args224.PrincipalName = principal_name
	args224.PrincipalType = principal_type
	err = args224.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvListRoles() (value []*Role, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error226 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error227 error
		error227, err = error226.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error227
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result225 := NewListRolesResult()
	err = result225.Read(iprot)
	iprot.ReadMessageEnd()
	value = result225.Success
	if result225.O1 != nil {
		o1 = result225.O1
	}
	return
}

// Parameters:
//  - HiveObject
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, o1 *MetaException, err error) {
	if err = p.sendGetPrivilegeSet(hiveObject, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPrivilegeSet()
}

func (p *ThriftHiveMetastoreClient) sendGetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_privilege_set", thrift.CALL, p.SeqId)
	args228 := NewGetPrivilegeSetArgs()
	args228.HiveObject = hiveObject
	args228.UserName = user_name
	args228.GroupNames = group_names
	err = args228.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetPrivilegeSet() (value *PrincipalPrivilegeSet, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error230 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error231 error
		error231, err = error230.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error231
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result229 := NewGetPrivilegeSetResult()
	err = result229.Read(iprot)
	iprot.ReadMessageEnd()
	value = result229.Success
	if result229.O1 != nil {
		o1 = result229.O1
	}
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
func (p *ThriftHiveMetastoreClient) ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, o1 *MetaException, err error) {
	if err = p.sendListPrivileges(principal_name, principal_type, hiveObject); err != nil {
		return
	}
	return p.recvListPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("list_privileges", thrift.CALL, p.SeqId)
	args232 := NewListPrivilegesArgs()
	args232.PrincipalName = principal_name
	args232.PrincipalType = principal_type
	args232.HiveObject = hiveObject
	err = args232.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvListPrivileges() (value []*HiveObjectPrivilege, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error234 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error235 error
		error235, err = error234.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error235
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result233 := NewListPrivilegesResult()
	err = result233.Read(iprot)
	iprot.ReadMessageEnd()
	value = result233.Success
	if result233.O1 != nil {
		o1 = result233.O1
	}
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) GrantPrivileges(privileges *PrivilegeBag) (r bool, o1 *MetaException, err error) {
	if err = p.sendGrantPrivileges(privileges); err != nil {
		return
	}
	return p.recvGrantPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendGrantPrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("grant_privileges", thrift.CALL, p.SeqId)
	args236 := NewGrantPrivilegesArgs()
	args236.Privileges = privileges
	err = args236.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGrantPrivileges() (value bool, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error238 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error239 error
		error239, err = error238.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error239
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result237 := NewGrantPrivilegesResult()
	err = result237.Read(iprot)
	iprot.ReadMessageEnd()
	value = result237.Success
	if result237.O1 != nil {
		o1 = result237.O1
	}
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) RevokePrivileges(privileges *PrivilegeBag) (r bool, o1 *MetaException, err error) {
	if err = p.sendRevokePrivileges(privileges); err != nil {
		return
	}
	return p.recvRevokePrivileges()
}

func (p *ThriftHiveMetastoreClient) sendRevokePrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("revoke_privileges", thrift.CALL, p.SeqId)
	args240 := NewRevokePrivilegesArgs()
	args240.Privileges = privileges
	err = args240.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvRevokePrivileges() (value bool, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error242 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error243 error
		error243, err = error242.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error243
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result241 := NewRevokePrivilegesResult()
	err = result241.Read(iprot)
	iprot.ReadMessageEnd()
	value = result241.Success
	if result241.O1 != nil {
		o1 = result241.O1
	}
	return
}

// Parameters:
//  - RenewerKerberosPrincipalName
func (p *ThriftHiveMetastoreClient) GetDelegationToken(renewer_kerberos_principal_name string) (r string, o1 *MetaException, err error) {
	if err = p.sendGetDelegationToken(renewer_kerberos_principal_name); err != nil {
		return
	}
	return p.recvGetDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendGetDelegationToken(renewer_kerberos_principal_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_delegation_token", thrift.CALL, p.SeqId)
	args244 := NewGetDelegationTokenArgs()
	args244.RenewerKerberosPrincipalName = renewer_kerberos_principal_name
	err = args244.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetDelegationToken() (value string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error246 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error247 error
		error247, err = error246.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error247
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result245 := NewGetDelegationTokenResult()
	err = result245.Read(iprot)
	iprot.ReadMessageEnd()
	value = result245.Success
	if result245.O1 != nil {
		o1 = result245.O1
	}
	return
}

// Parameters:
//  - RenewerKerberosPrincipalName
//  - TokenSignature
func (p *ThriftHiveMetastoreClient) GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (r string, o1 *MetaException, err error) {
	if err = p.sendGetDelegationTokenWithSignature(renewer_kerberos_principal_name, token_signature); err != nil {
		return
	}
	return p.recvGetDelegationTokenWithSignature()
}

func (p *ThriftHiveMetastoreClient) sendGetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.CALL, p.SeqId)
	args248 := NewGetDelegationTokenWithSignatureArgs()
	args248.RenewerKerberosPrincipalName = renewer_kerberos_principal_name
	args248.TokenSignature = token_signature
	err = args248.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvGetDelegationTokenWithSignature() (value string, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error250 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error251 error
		error251, err = error250.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error251
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result249 := NewGetDelegationTokenWithSignatureResult()
	err = result249.Read(iprot)
	iprot.ReadMessageEnd()
	value = result249.Success
	if result249.O1 != nil {
		o1 = result249.O1
	}
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) RenewDelegationToken(token_str_form string) (r int64, o1 *MetaException, err error) {
	if err = p.sendRenewDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvRenewDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendRenewDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("renew_delegation_token", thrift.CALL, p.SeqId)
	args252 := NewRenewDelegationTokenArgs()
	args252.TokenStrForm = token_str_form
	err = args252.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvRenewDelegationToken() (value int64, o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error254 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error255 error
		error255, err = error254.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error255
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result253 := NewRenewDelegationTokenResult()
	err = result253.Read(iprot)
	iprot.ReadMessageEnd()
	value = result253.Success
	if result253.O1 != nil {
		o1 = result253.O1
	}
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) CancelDelegationToken(token_str_form string) (o1 *MetaException, err error) {
	if err = p.sendCancelDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvCancelDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendCancelDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("cancel_delegation_token", thrift.CALL, p.SeqId)
	args256 := NewCancelDelegationTokenArgs()
	args256.TokenStrForm = token_str_form
	err = args256.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveMetastoreClient) recvCancelDelegationToken() (o1 *MetaException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error258 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error259 error
		error259, err = error258.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error259
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result257 := NewCancelDelegationTokenResult()
	err = result257.Read(iprot)
	iprot.ReadMessageEnd()
	if result257.O1 != nil {
		o1 = result257.O1
	}
	return
}

type ThriftHiveMetastoreProcessor struct {
	*fb303.FacebookServiceProcessor
}

func NewThriftHiveMetastoreProcessor(handler ThriftHiveMetastore) *ThriftHiveMetastoreProcessor {
	self260 := &ThriftHiveMetastoreProcessor{fb303.NewFacebookServiceProcessor(handler)}
	self260.AddToProcessorMap("create_database", &thriftHiveMetastoreProcessorCreateDatabase{handler: handler})
	self260.AddToProcessorMap("get_database", &thriftHiveMetastoreProcessorGetDatabase{handler: handler})
	self260.AddToProcessorMap("drop_database", &thriftHiveMetastoreProcessorDropDatabase{handler: handler})
	self260.AddToProcessorMap("get_databases", &thriftHiveMetastoreProcessorGetDatabases{handler: handler})
	self260.AddToProcessorMap("get_all_databases", &thriftHiveMetastoreProcessorGetAllDatabases{handler: handler})
	self260.AddToProcessorMap("alter_database", &thriftHiveMetastoreProcessorAlterDatabase{handler: handler})
	self260.AddToProcessorMap("get_type", &thriftHiveMetastoreProcessorGetType{handler: handler})
	self260.AddToProcessorMap("create_type", &thriftHiveMetastoreProcessorCreateType{handler: handler})
	self260.AddToProcessorMap("drop_type", &thriftHiveMetastoreProcessorDropType{handler: handler})
	self260.AddToProcessorMap("get_type_all", &thriftHiveMetastoreProcessorGetTypeAll{handler: handler})
	self260.AddToProcessorMap("get_fields", &thriftHiveMetastoreProcessorGetFields{handler: handler})
	self260.AddToProcessorMap("get_schema", &thriftHiveMetastoreProcessorGetSchema{handler: handler})
	self260.AddToProcessorMap("create_table", &thriftHiveMetastoreProcessorCreateTable{handler: handler})
	self260.AddToProcessorMap("drop_table", &thriftHiveMetastoreProcessorDropTable{handler: handler})
	self260.AddToProcessorMap("get_tables", &thriftHiveMetastoreProcessorGetTables{handler: handler})
	self260.AddToProcessorMap("get_all_tables", &thriftHiveMetastoreProcessorGetAllTables{handler: handler})
	self260.AddToProcessorMap("get_table", &thriftHiveMetastoreProcessorGetTable{handler: handler})
	self260.AddToProcessorMap("alter_table", &thriftHiveMetastoreProcessorAlterTable{handler: handler})
	self260.AddToProcessorMap("add_partition", &thriftHiveMetastoreProcessorAddPartition{handler: handler})
	self260.AddToProcessorMap("append_partition", &thriftHiveMetastoreProcessorAppendPartition{handler: handler})
	self260.AddToProcessorMap("append_partition_by_name", &thriftHiveMetastoreProcessorAppendPartitionByName{handler: handler})
	self260.AddToProcessorMap("drop_partition", &thriftHiveMetastoreProcessorDropPartition{handler: handler})
	self260.AddToProcessorMap("drop_partition_by_name", &thriftHiveMetastoreProcessorDropPartitionByName{handler: handler})
	self260.AddToProcessorMap("get_partition", &thriftHiveMetastoreProcessorGetPartition{handler: handler})
	self260.AddToProcessorMap("get_partition_with_auth", &thriftHiveMetastoreProcessorGetPartitionWithAuth{handler: handler})
	self260.AddToProcessorMap("get_partition_by_name", &thriftHiveMetastoreProcessorGetPartitionByName{handler: handler})
	self260.AddToProcessorMap("get_partitions", &thriftHiveMetastoreProcessorGetPartitions{handler: handler})
	self260.AddToProcessorMap("get_partitions_with_auth", &thriftHiveMetastoreProcessorGetPartitionsWithAuth{handler: handler})
	self260.AddToProcessorMap("get_partition_names", &thriftHiveMetastoreProcessorGetPartitionNames{handler: handler})
	self260.AddToProcessorMap("get_partitions_ps", &thriftHiveMetastoreProcessorGetPartitionsPs{handler: handler})
	self260.AddToProcessorMap("get_partitions_ps_with_auth", &thriftHiveMetastoreProcessorGetPartitionsPsWithAuth{handler: handler})
	self260.AddToProcessorMap("get_partition_names_ps", &thriftHiveMetastoreProcessorGetPartitionNamesPs{handler: handler})
	self260.AddToProcessorMap("get_partitions_by_filter", &thriftHiveMetastoreProcessorGetPartitionsByFilter{handler: handler})
	self260.AddToProcessorMap("alter_partition", &thriftHiveMetastoreProcessorAlterPartition{handler: handler})
	self260.AddToProcessorMap("get_config_value", &thriftHiveMetastoreProcessorGetConfigValue{handler: handler})
	self260.AddToProcessorMap("partition_name_to_vals", &thriftHiveMetastoreProcessorPartitionNameToVals{handler: handler})
	self260.AddToProcessorMap("partition_name_to_spec", &thriftHiveMetastoreProcessorPartitionNameToSpec{handler: handler})
	self260.AddToProcessorMap("add_index", &thriftHiveMetastoreProcessorAddIndex{handler: handler})
	self260.AddToProcessorMap("alter_index", &thriftHiveMetastoreProcessorAlterIndex{handler: handler})
	self260.AddToProcessorMap("drop_index_by_name", &thriftHiveMetastoreProcessorDropIndexByName{handler: handler})
	self260.AddToProcessorMap("get_index_by_name", &thriftHiveMetastoreProcessorGetIndexByName{handler: handler})
	self260.AddToProcessorMap("get_indexes", &thriftHiveMetastoreProcessorGetIndexes{handler: handler})
	self260.AddToProcessorMap("get_index_names", &thriftHiveMetastoreProcessorGetIndexNames{handler: handler})
	self260.AddToProcessorMap("create_role", &thriftHiveMetastoreProcessorCreateRole{handler: handler})
	self260.AddToProcessorMap("drop_role", &thriftHiveMetastoreProcessorDropRole{handler: handler})
	self260.AddToProcessorMap("get_role_names", &thriftHiveMetastoreProcessorGetRoleNames{handler: handler})
	self260.AddToProcessorMap("grant_role", &thriftHiveMetastoreProcessorGrantRole{handler: handler})
	self260.AddToProcessorMap("revoke_role", &thriftHiveMetastoreProcessorRevokeRole{handler: handler})
	self260.AddToProcessorMap("list_roles", &thriftHiveMetastoreProcessorListRoles{handler: handler})
	self260.AddToProcessorMap("get_privilege_set", &thriftHiveMetastoreProcessorGetPrivilegeSet{handler: handler})
	self260.AddToProcessorMap("list_privileges", &thriftHiveMetastoreProcessorListPrivileges{handler: handler})
	self260.AddToProcessorMap("grant_privileges", &thriftHiveMetastoreProcessorGrantPrivileges{handler: handler})
	self260.AddToProcessorMap("revoke_privileges", &thriftHiveMetastoreProcessorRevokePrivileges{handler: handler})
	self260.AddToProcessorMap("get_delegation_token", &thriftHiveMetastoreProcessorGetDelegationToken{handler: handler})
	self260.AddToProcessorMap("get_delegation_token_with_signature", &thriftHiveMetastoreProcessorGetDelegationTokenWithSignature{handler: handler})
	self260.AddToProcessorMap("renew_delegation_token", &thriftHiveMetastoreProcessorRenewDelegationToken{handler: handler})
	self260.AddToProcessorMap("cancel_delegation_token", &thriftHiveMetastoreProcessorCancelDelegationToken{handler: handler})
	return self260
}

type thriftHiveMetastoreProcessorCreateDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateDatabaseArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateDatabaseResult()
	if result.O1, result.O2, result.O3, err = p.handler.CreateDatabase(args.Database); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_database: "+err.Error())
		oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("create_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetDatabaseArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetDatabaseResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetDatabase(args.Name); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_database: "+err.Error())
		oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDropDatabaseArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDropDatabaseResult()
	if result.O1, result.O2, result.O3, err = p.handler.DropDatabase(args.Name, args.DeleteData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_database: "+err.Error())
		oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("drop_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetDatabasesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetDatabasesResult()
	if result.Success, result.O1, err = p.handler.GetDatabases(args.Pattern); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: "+err.Error())
		oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetAllDatabasesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetAllDatabasesResult()
	if result.Success, result.O1, err = p.handler.GetAllDatabases(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_databases: "+err.Error())
		oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_all_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAlterDatabaseArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAlterDatabaseResult()
	if result.O1, result.O2, err = p.handler.AlterDatabase(args.Dbname, args.Db); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_database: "+err.Error())
		oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("alter_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTypeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTypeResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetType(args.Name); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type: "+err.Error())
		oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateTypeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateTypeResult()
	if result.Success, result.O1, result.O2, result.O3, err = p.handler.CreateType(args.TypeA1); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_type: "+err.Error())
		oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("create_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDropTypeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDropTypeResult()
	if result.Success, result.O1, result.O2, err = p.handler.DropType(args.TypeA1); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_type: "+err.Error())
		oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("drop_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTypeAll struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTypeAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTypeAllArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTypeAllResult()
	if result.Success, result.O2, err = p.handler.GetTypeAll(args.Name); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type_all: "+err.Error())
		oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_type_all", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetFields struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFields) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetFieldsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetFieldsResult()
	if result.Success, result.O1, result.O2, result.O3, err = p.handler.GetFields(args.DbName, args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields: "+err.Error())
		oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_fields", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetSchema struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSchemaArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSchemaResult()
	if result.Success, result.O1, result.O2, result.O3, err = p.handler.GetSchema(args.DbName, args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema: "+err.Error())
		oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_schema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateTableResult()
	if result.O1, result.O2, result.O3, result.O4, err = p.handler.CreateTable(args.Tbl); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: "+err.Error())
		oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDropTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDropTableResult()
	if result.O1, result.O3, err = p.handler.DropTable(args.Dbname, args.Name, args.DeleteData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table: "+err.Error())
		oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("drop_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTablesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTablesResult()
	if result.Success, result.O1, err = p.handler.GetTables(args.DbName, args.Pattern); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: "+err.Error())
		oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetAllTablesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetAllTablesResult()
	if result.Success, result.O1, err = p.handler.GetAllTables(args.DbName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_tables: "+err.Error())
		oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_all_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTableResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetTable(args.Dbname, args.TblName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table: "+err.Error())
		oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAlterTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAlterTableResult()
	if result.O1, result.O2, err = p.handler.AlterTable(args.Dbname, args.TblName, args.NewTbl); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table: "+err.Error())
		oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("alter_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAddPartitionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAddPartitionResult()
	if result.Success, result.O1, result.O2, result.O3, err = p.handler.AddPartition(args.NewPart); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition: "+err.Error())
		oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("add_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAppendPartitionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAppendPartitionResult()
	if result.Success, result.O1, result.O2, result.O3, err = p.handler.AppendPartition(args.DbName, args.TblName, args.PartVals); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition: "+err.Error())
		oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("append_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAppendPartitionByNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAppendPartitionByNameResult()
	if result.Success, result.O1, result.O2, result.O3, err = p.handler.AppendPartitionByName(args.DbName, args.TblName, args.PartName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name: "+err.Error())
		oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("append_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDropPartitionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDropPartitionResult()
	if result.Success, result.O1, result.O2, err = p.handler.DropPartition(args.DbName, args.TblName, args.PartVals, args.DeleteData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition: "+err.Error())
		oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("drop_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDropPartitionByNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDropPartitionByNameResult()
	if result.Success, result.O1, result.O2, err = p.handler.DropPartitionByName(args.DbName, args.TblName, args.PartName, args.DeleteData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name: "+err.Error())
		oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("drop_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetPartition(args.DbName, args.TblName, args.PartVals); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition: "+err.Error())
		oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionWithAuthArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionWithAuthResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetPartitionWithAuth(args.DbName, args.TblName, args.PartVals, args.UserName, args.GroupNames); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_with_auth: "+err.Error())
		oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partition_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionByNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionByNameResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetPartitionByName(args.DbName, args.TblName, args.PartName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_by_name: "+err.Error())
		oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitions struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionsResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetPartitions(args.DbName, args.TblName, args.MaxParts); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions: "+err.Error())
		oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partitions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionsWithAuthArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionsWithAuthResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetPartitionsWithAuth(args.DbName, args.TblName, args.MaxParts, args.UserName, args.GroupNames); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_with_auth: "+err.Error())
		oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partitions_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionNamesResult()
	if result.Success, result.O2, err = p.handler.GetPartitionNames(args.DbName, args.TblName, args.MaxParts); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names: "+err.Error())
		oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partition_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionsPsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionsPsResult()
	if result.Success, result.O1, err = p.handler.GetPartitionsPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps: "+err.Error())
		oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partitions_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionsPsWithAuthArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionsPsWithAuthResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetPartitionsPsWithAuth(args.DbName, args.TblName, args.PartVals, args.MaxParts, args.UserName, args.GroupNames); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps_with_auth: "+err.Error())
		oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNamesPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNamesPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionNamesPsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionNamesPsResult()
	if result.Success, result.O1, err = p.handler.GetPartitionNamesPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names_ps: "+err.Error())
		oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partition_names_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByFilter struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByFilter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPartitionsByFilterArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPartitionsByFilterResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetPartitionsByFilter(args.DbName, args.TblName, args.Filter, args.MaxParts); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter: "+err.Error())
		oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAlterPartitionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAlterPartitionResult()
	if result.O1, result.O2, err = p.handler.AlterPartition(args.DbName, args.TblName, args.NewPart); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition: "+err.Error())
		oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("alter_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetConfigValue struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetConfigValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetConfigValueArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetConfigValueResult()
	if result.Success, result.O1, err = p.handler.GetConfigValue(args.Name, args.DefaultValue); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_config_value: "+err.Error())
		oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_config_value", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToVals struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToVals) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewPartitionNameToValsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewPartitionNameToValsResult()
	if result.Success, result.O1, err = p.handler.PartitionNameToVals(args.PartName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_vals: "+err.Error())
		oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("partition_name_to_vals", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToSpec struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToSpec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewPartitionNameToSpecArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewPartitionNameToSpecResult()
	if result.Success, result.O1, err = p.handler.PartitionNameToSpec(args.PartName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_spec: "+err.Error())
		oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("partition_name_to_spec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAddIndexArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAddIndexResult()
	if result.Success, result.O1, result.O2, result.O3, err = p.handler.AddIndex(args.NewIndex, args.IndexTable); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_index: "+err.Error())
		oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("add_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAlterIndexArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAlterIndexResult()
	if result.O1, result.O2, err = p.handler.AlterIndex(args.Dbname, args.BaseTblName, args.IdxName, args.NewIdx); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_index: "+err.Error())
		oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("alter_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDropIndexByNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDropIndexByNameResult()
	if result.Success, result.O1, result.O2, err = p.handler.DropIndexByName(args.DbName, args.TblName, args.IndexName, args.DeleteData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_index_by_name: "+err.Error())
		oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("drop_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetIndexByNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetIndexByNameResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetIndexByName(args.DbName, args.TblName, args.IndexName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_by_name: "+err.Error())
		oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexes struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetIndexesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetIndexesResult()
	if result.Success, result.O1, result.O2, err = p.handler.GetIndexes(args.DbName, args.TblName, args.MaxIndexes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexes: "+err.Error())
		oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_indexes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetIndexNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetIndexNamesResult()
	if result.Success, result.O2, err = p.handler.GetIndexNames(args.DbName, args.TblName, args.MaxIndexes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_names: "+err.Error())
		oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_index_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateRoleArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateRoleResult()
	if result.Success, result.O1, err = p.handler.CreateRole(args.Role); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_role: "+err.Error())
		oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("create_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDropRoleArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDropRoleResult()
	if result.Success, result.O1, err = p.handler.DropRole(args.RoleName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_role: "+err.Error())
		oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("drop_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetRoleNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRoleNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRoleNamesResult()
	if result.Success, result.O1, err = p.handler.GetRoleNames(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_names: "+err.Error())
		oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_role_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGrantRoleArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGrantRoleResult()
	if result.Success, result.O1, err = p.handler.GrantRole(args.RoleName, args.PrincipalName, args.PrincipalType, args.Grantor, args.GrantorType, args.GrantOption); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_role: "+err.Error())
		oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("grant_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokeRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokeRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRevokeRoleArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRevokeRoleResult()
	if result.Success, result.O1, err = p.handler.RevokeRole(args.RoleName, args.PrincipalName, args.PrincipalType); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_role: "+err.Error())
		oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("revoke_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListRoles struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListRoles) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListRolesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListRolesResult()
	if result.Success, result.O1, err = p.handler.ListRoles(args.PrincipalName, args.PrincipalType); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_roles: "+err.Error())
		oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("list_roles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPrivilegeSet struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrivilegeSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPrivilegeSetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPrivilegeSetResult()
	if result.Success, result.O1, err = p.handler.GetPrivilegeSet(args.HiveObject, args.UserName, args.GroupNames); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privilege_set: "+err.Error())
		oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_privilege_set", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListPrivilegesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListPrivilegesResult()
	if result.Success, result.O1, err = p.handler.ListPrivileges(args.PrincipalName, args.PrincipalType, args.HiveObject); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_privileges: "+err.Error())
		oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("list_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGrantPrivilegesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGrantPrivilegesResult()
	if result.Success, result.O1, err = p.handler.GrantPrivileges(args.Privileges); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_privileges: "+err.Error())
		oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("grant_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokePrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokePrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRevokePrivilegesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRevokePrivilegesResult()
	if result.Success, result.O1, err = p.handler.RevokePrivileges(args.Privileges); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_privileges: "+err.Error())
		oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("revoke_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetDelegationTokenArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetDelegationTokenResult()
	if result.Success, result.O1, err = p.handler.GetDelegationToken(args.RenewerKerberosPrincipalName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token: "+err.Error())
		oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDelegationTokenWithSignature struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationTokenWithSignature) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetDelegationTokenWithSignatureArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetDelegationTokenWithSignatureResult()
	if result.Success, result.O1, err = p.handler.GetDelegationTokenWithSignature(args.RenewerKerberosPrincipalName, args.TokenSignature); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token_with_signature: "+err.Error())
		oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRenewDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenewDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewRenewDelegationTokenArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewRenewDelegationTokenResult()
	if result.Success, result.O1, err = p.handler.RenewDelegationToken(args.TokenStrForm); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew_delegation_token: "+err.Error())
		oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("renew_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCancelDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCancelDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCancelDelegationTokenArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCancelDelegationTokenResult()
	if result.O1, err = p.handler.CancelDelegationToken(args.TokenStrForm); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_delegation_token: "+err.Error())
		oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("cancel_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateDatabaseArgs struct {
	Database *Database `thrift:"database,1"`
}

func NewCreateDatabaseArgs() *CreateDatabaseArgs {
	return &CreateDatabaseArgs{}
}

func (p *CreateDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	p.Database = NewDatabase()
	if err := p.Database.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Database)
	}
	return nil
}

func (p *CreateDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Database != nil {
		if err := oprot.WriteFieldBegin("database", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:database: %s", p, err)
		}
		if err := p.Database.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Database)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:database: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatabaseArgs(%+v)", *p)
}

type CreateDatabaseResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1"`
	O2 *InvalidObjectException `thrift:"o2,2"`
	O3 *MetaException          `thrift:"o3,3"`
}

func NewCreateDatabaseResult() *CreateDatabaseResult {
	return &CreateDatabaseResult{}
}

func (p *CreateDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewAlreadyExistsException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *CreateDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewInvalidObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *CreateDatabaseResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *CreateDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatabaseResult(%+v)", *p)
}

type GetDatabaseArgs struct {
	Name string `thrift:"name,1"`
}

func NewGetDatabaseArgs() *GetDatabaseArgs {
	return &GetDatabaseArgs{}
}

func (p *GetDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabaseArgs(%+v)", *p)
}

type GetDatabaseResult struct {
	Success *Database              `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewGetDatabaseResult() *GetDatabaseResult {
	return &GetDatabaseResult{}
}

func (p *GetDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabaseResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewDatabase()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabaseResult(%+v)", *p)
}

type DropDatabaseArgs struct {
	Name       string `thrift:"name,1"`
	DeleteData bool   `thrift:"deleteData,2"`
}

func NewDropDatabaseArgs() *DropDatabaseArgs {
	return &DropDatabaseArgs{}
}

func (p *DropDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropDatabaseArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *DropDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deleteData: %s", p, err)
	}
	return err
}

func (p *DropDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropDatabaseArgs(%+v)", *p)
}

type DropDatabaseResult struct {
	O1 *NoSuchObjectException     `thrift:"o1,1"`
	O2 *InvalidOperationException `thrift:"o2,2"`
	O3 *MetaException             `thrift:"o3,3"`
}

func NewDropDatabaseResult() *DropDatabaseResult {
	return &DropDatabaseResult{}
}

func (p *DropDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *DropDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewInvalidOperationException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *DropDatabaseResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *DropDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropDatabaseResult(%+v)", *p)
}

type GetDatabasesArgs struct {
	Pattern string `thrift:"pattern,1"`
}

func NewGetDatabasesArgs() *GetDatabasesArgs {
	return &GetDatabasesArgs{}
}

func (p *GetDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabasesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *GetDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:pattern: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return fmt.Errorf("%T.pattern (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:pattern: %s", p, err)
	}
	return err
}

func (p *GetDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabasesArgs(%+v)", *p)
}

type GetDatabasesResult struct {
	Success []string       `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetDatabasesResult() *GetDatabasesResult {
	return &GetDatabasesResult{}
}

func (p *GetDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabasesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem261 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem261 = v
		}
		p.Success = append(p.Success, _elem261)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetDatabasesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabasesResult(%+v)", *p)
}

type GetAllDatabasesArgs struct {
}

func NewGetAllDatabasesArgs() *GetAllDatabasesArgs {
	return &GetAllDatabasesArgs{}
}

func (p *GetAllDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllDatabasesArgs(%+v)", *p)
}

type GetAllDatabasesResult struct {
	Success []string       `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetAllDatabasesResult() *GetAllDatabasesResult {
	return &GetAllDatabasesResult{}
}

func (p *GetAllDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllDatabasesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem262 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem262 = v
		}
		p.Success = append(p.Success, _elem262)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetAllDatabasesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetAllDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetAllDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllDatabasesResult(%+v)", *p)
}

type AlterDatabaseArgs struct {
	Dbname string    `thrift:"dbname,1"`
	Db     *Database `thrift:"db,2"`
}

func NewAlterDatabaseArgs() *AlterDatabaseArgs {
	return &AlterDatabaseArgs{}
}

func (p *AlterDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterDatabaseArgs) readField2(iprot thrift.TProtocol) error {
	p.Db = NewDatabase()
	if err := p.Db.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Db)
	}
	return nil
}

func (p *AlterDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Db != nil {
		if err := oprot.WriteFieldBegin("db", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:db: %s", p, err)
		}
		if err := p.Db.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Db)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:db: %s", p, err)
		}
	}
	return err
}

func (p *AlterDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterDatabaseArgs(%+v)", *p)
}

type AlterDatabaseResult struct {
	O1 *MetaException         `thrift:"o1,1"`
	O2 *NoSuchObjectException `thrift:"o2,2"`
}

func NewAlterDatabaseResult() *AlterDatabaseResult {
	return &AlterDatabaseResult{}
}

func (p *AlterDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AlterDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AlterDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterDatabaseResult(%+v)", *p)
}

type GetTypeArgs struct {
	Name string `thrift:"name,1"`
}

func NewGetTypeArgs() *GetTypeArgs {
	return &GetTypeArgs{}
}

func (p *GetTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeArgs(%+v)", *p)
}

type GetTypeResult struct {
	Success *Type                  `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewGetTypeResult() *GetTypeResult {
	return &GetTypeResult{}
}

func (p *GetTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewType()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetTypeResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetTypeResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeResult(%+v)", *p)
}

type CreateTypeArgs struct {
	TypeA1 *Type `thrift:"type,1"`
}

func NewCreateTypeArgs() *CreateTypeArgs {
	return &CreateTypeArgs{}
}

func (p *CreateTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTypeArgs) readField1(iprot thrift.TProtocol) error {
	p.TypeA1 = NewType()
	if err := p.TypeA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TypeA1)
	}
	return nil
}

func (p *CreateTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.TypeA1 != nil {
		if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
		}
		if err := p.TypeA1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TypeA1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:type: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTypeArgs(%+v)", *p)
}

type CreateTypeResult struct {
	Success bool                    `thrift:"success,0"`
	O1      *AlreadyExistsException `thrift:"o1,1"`
	O2      *InvalidObjectException `thrift:"o2,2"`
	O3      *MetaException          `thrift:"o3,3"`
}

func NewCreateTypeResult() *CreateTypeResult {
	return &CreateTypeResult{}
}

func (p *CreateTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTypeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CreateTypeResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewAlreadyExistsException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *CreateTypeResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewInvalidObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *CreateTypeResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *CreateTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CreateTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTypeResult(%+v)", *p)
}

type DropTypeArgs struct {
	TypeA1 string `thrift:"type,1"`
}

func NewDropTypeArgs() *DropTypeArgs {
	return &DropTypeArgs{}
}

func (p *DropTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTypeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *DropTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *DropTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTypeArgs(%+v)", *p)
}

type DropTypeResult struct {
	Success bool                   `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewDropTypeResult() *DropTypeResult {
	return &DropTypeResult{}
}

func (p *DropTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTypeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *DropTypeResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *DropTypeResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *DropTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *DropTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTypeResult(%+v)", *p)
}

type GetTypeAllArgs struct {
	Name string `thrift:"name,1"`
}

func NewGetTypeAllArgs() *GetTypeAllArgs {
	return &GetTypeAllArgs{}
}

func (p *GetTypeAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeAllArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetTypeAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetTypeAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeAllArgs(%+v)", *p)
}

type GetTypeAllResult struct {
	Success map[string]*Type `thrift:"success,0"`
	O2      *MetaException   `thrift:"o2,1"`
}

func NewGetTypeAllResult() *GetTypeAllResult {
	return &GetTypeAllResult{}
}

func (p *GetTypeAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeAllResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Success = make(map[string]*Type, size)
	for i := 0; i < size; i++ {
		var _key263 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key263 = v
		}
		_val264 := NewType()
		if err := _val264.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val264)
		}
		p.Success[_key263] = _val264
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *GetTypeAllResult) readField1(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetTypeAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeAllResult(%+v)", *p)
}

type GetFieldsArgs struct {
	DbName    string `thrift:"db_name,1"`
	TableName string `thrift:"table_name,2"`
}

func NewGetFieldsArgs() *GetFieldsArgs {
	return &GetFieldsArgs{}
}

func (p *GetFieldsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFieldsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetFieldsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetFieldsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFieldsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetFieldsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.table_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table_name: %s", p, err)
	}
	return err
}

func (p *GetFieldsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFieldsArgs(%+v)", *p)
}

type GetFieldsResult struct {
	Success []*FieldSchema         `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *UnknownTableException `thrift:"o2,2"`
	O3      *UnknownDBException    `thrift:"o3,3"`
}

func NewGetFieldsResult() *GetFieldsResult {
	return &GetFieldsResult{}
}

func (p *GetFieldsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFieldsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*FieldSchema, 0, size)
	for i := 0; i < size; i++ {
		_elem265 := NewFieldSchema()
		if err := _elem265.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem265)
		}
		p.Success = append(p.Success, _elem265)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetFieldsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetFieldsResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewUnknownTableException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetFieldsResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewUnknownDBException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *GetFieldsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFieldsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFieldsResult(%+v)", *p)
}

type GetSchemaArgs struct {
	DbName    string `thrift:"db_name,1"`
	TableName string `thrift:"table_name,2"`
}

func NewGetSchemaArgs() *GetSchemaArgs {
	return &GetSchemaArgs{}
}

func (p *GetSchemaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetSchemaArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetSchemaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetSchemaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.table_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table_name: %s", p, err)
	}
	return err
}

func (p *GetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaArgs(%+v)", *p)
}

type GetSchemaResult struct {
	Success []*FieldSchema         `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *UnknownTableException `thrift:"o2,2"`
	O3      *UnknownDBException    `thrift:"o3,3"`
}

func NewGetSchemaResult() *GetSchemaResult {
	return &GetSchemaResult{}
}

func (p *GetSchemaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*FieldSchema, 0, size)
	for i := 0; i < size; i++ {
		_elem266 := NewFieldSchema()
		if err := _elem266.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem266)
		}
		p.Success = append(p.Success, _elem266)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetSchemaResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetSchemaResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewUnknownTableException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetSchemaResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewUnknownDBException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *GetSchemaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaResult(%+v)", *p)
}

type CreateTableArgs struct {
	Tbl *Table `thrift:"tbl,1"`
}

func NewCreateTableArgs() *CreateTableArgs {
	return &CreateTableArgs{}
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableArgs) readField1(iprot thrift.TProtocol) error {
	p.Tbl = NewTable()
	if err := p.Tbl.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Tbl)
	}
	return nil
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Tbl != nil {
		if err := oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:tbl: %s", p, err)
		}
		if err := p.Tbl.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Tbl)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:tbl: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableArgs(%+v)", *p)
}

type CreateTableResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1"`
	O2 *InvalidObjectException `thrift:"o2,2"`
	O3 *MetaException          `thrift:"o3,3"`
	O4 *NoSuchObjectException  `thrift:"o4,4"`
}

func NewCreateTableResult() *CreateTableResult {
	return &CreateTableResult{}
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewAlreadyExistsException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *CreateTableResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewInvalidObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *CreateTableResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *CreateTableResult) readField4(iprot thrift.TProtocol) error {
	p.O4 = NewNoSuchObjectException()
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4)
	}
	return nil
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O4 != nil:
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.O4 != nil {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableResult(%+v)", *p)
}

type DropTableArgs struct {
	Dbname     string `thrift:"dbname,1"`
	Name       string `thrift:"name,2"`
	DeleteData bool   `thrift:"deleteData,3"`
}

func NewDropTableArgs() *DropTableArgs {
	return &DropTableArgs{}
}

func (p *DropTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *DropTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:deleteData: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableArgs(%+v)", *p)
}

type DropTableResult struct {
	O1 *NoSuchObjectException `thrift:"o1,1"`
	O3 *MetaException         `thrift:"o3,2"`
}

func NewDropTableResult() *DropTableResult {
	return &DropTableResult{}
}

func (p *DropTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *DropTableResult) readField2(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *DropTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableResult(%+v)", *p)
}

type GetTablesArgs struct {
	DbName  string `thrift:"db_name,1"`
	Pattern string `thrift:"pattern,2"`
}

func NewGetTablesArgs() *GetTablesArgs {
	return &GetTablesArgs{}
}

func (p *GetTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetTablesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *GetTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:pattern: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return fmt.Errorf("%T.pattern (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:pattern: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesArgs(%+v)", *p)
}

type GetTablesResult struct {
	Success []string       `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetTablesResult() *GetTablesResult {
	return &GetTablesResult{}
}

func (p *GetTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem267 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem267 = v
		}
		p.Success = append(p.Success, _elem267)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetTablesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesResult(%+v)", *p)
}

type GetAllTablesArgs struct {
	DbName string `thrift:"db_name,1"`
}

func NewGetAllTablesArgs() *GetAllTablesArgs {
	return &GetAllTablesArgs{}
}

func (p *GetAllTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetAllTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetAllTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllTablesArgs(%+v)", *p)
}

type GetAllTablesResult struct {
	Success []string       `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetAllTablesResult() *GetAllTablesResult {
	return &GetAllTablesResult{}
}

func (p *GetAllTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem268 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem268 = v
		}
		p.Success = append(p.Success, _elem268)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetAllTablesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetAllTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetAllTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllTablesResult(%+v)", *p)
}

type GetTableArgs struct {
	Dbname  string `thrift:"dbname,1"`
	TblName string `thrift:"tbl_name,2"`
}

func NewGetTableArgs() *GetTableArgs {
	return &GetTableArgs{}
}

func (p *GetTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *GetTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *GetTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableArgs(%+v)", *p)
}

type GetTableResult struct {
	Success *Table                 `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewGetTableResult() *GetTableResult {
	return &GetTableResult{}
}

func (p *GetTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewTable()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetTableResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableResult(%+v)", *p)
}

type AlterTableArgs struct {
	Dbname  string `thrift:"dbname,1"`
	TblName string `thrift:"tbl_name,2"`
	NewTbl  *Table `thrift:"new_tbl,3"`
}

func NewAlterTableArgs() *AlterTableArgs {
	return &AlterTableArgs{}
}

func (p *AlterTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterTableArgs) readField3(iprot thrift.TProtocol) error {
	p.NewTbl = NewTable()
	if err := p.NewTbl.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewTbl)
	}
	return nil
}

func (p *AlterTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NewTbl != nil {
		if err := oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:new_tbl: %s", p, err)
		}
		if err := p.NewTbl.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NewTbl)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:new_tbl: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableArgs(%+v)", *p)
}

type AlterTableResult struct {
	O1 *InvalidOperationException `thrift:"o1,1"`
	O2 *MetaException             `thrift:"o2,2"`
}

func NewAlterTableResult() *AlterTableResult {
	return &AlterTableResult{}
}

func (p *AlterTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewInvalidOperationException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AlterTableResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AlterTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableResult(%+v)", *p)
}

type AddPartitionArgs struct {
	NewPart *Partition `thrift:"new_part,1"`
}

func NewAddPartitionArgs() *AddPartitionArgs {
	return &AddPartitionArgs{}
}

func (p *AddPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionArgs) readField1(iprot thrift.TProtocol) error {
	p.NewPart = NewPartition()
	if err := p.NewPart.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart)
	}
	return nil
}

func (p *AddPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.NewPart != nil {
		if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:new_part: %s", p, err)
		}
		if err := p.NewPart.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NewPart)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:new_part: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionArgs(%+v)", *p)
}

type AddPartitionResult struct {
	Success *Partition              `thrift:"success,0"`
	O1      *InvalidObjectException `thrift:"o1,1"`
	O2      *AlreadyExistsException `thrift:"o2,2"`
	O3      *MetaException          `thrift:"o3,3"`
}

func NewAddPartitionResult() *AddPartitionResult {
	return &AddPartitionResult{}
}

func (p *AddPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewPartition()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AddPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewInvalidObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AddPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewAlreadyExistsException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AddPartitionResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *AddPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionResult(%+v)", *p)
}

type AppendPartitionArgs struct {
	DbName   string   `thrift:"db_name,1"`
	TblName  string   `thrift:"tbl_name,2"`
	PartVals []string `thrift:"part_vals,3"`
}

func NewAppendPartitionArgs() *AppendPartitionArgs {
	return &AppendPartitionArgs{}
}

func (p *AppendPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.PartVals = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem269 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem269 = v
		}
		p.PartVals = append(p.PartVals, _elem269)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AppendPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.PartVals != nil {
		if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.PartVals {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionArgs(%+v)", *p)
}

type AppendPartitionResult struct {
	Success *Partition              `thrift:"success,0"`
	O1      *InvalidObjectException `thrift:"o1,1"`
	O2      *AlreadyExistsException `thrift:"o2,2"`
	O3      *MetaException          `thrift:"o3,3"`
}

func NewAppendPartitionResult() *AppendPartitionResult {
	return &AppendPartitionResult{}
}

func (p *AppendPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewPartition()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AppendPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewInvalidObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AppendPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewAlreadyExistsException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AppendPartitionResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *AppendPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionResult(%+v)", *p)
}

type AppendPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1"`
	TblName  string `thrift:"tbl_name,2"`
	PartName string `thrift:"part_name,3"`
}

func NewAppendPartitionByNameArgs() *AppendPartitionByNameArgs {
	return &AppendPartitionByNameArgs{}
}

func (p *AppendPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.PartName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameArgs(%+v)", *p)
}

type AppendPartitionByNameResult struct {
	Success *Partition              `thrift:"success,0"`
	O1      *InvalidObjectException `thrift:"o1,1"`
	O2      *AlreadyExistsException `thrift:"o2,2"`
	O3      *MetaException          `thrift:"o3,3"`
}

func NewAppendPartitionByNameResult() *AppendPartitionByNameResult {
	return &AppendPartitionByNameResult{}
}

func (p *AppendPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewPartition()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AppendPartitionByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewInvalidObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AppendPartitionByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewAlreadyExistsException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AppendPartitionByNameResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *AppendPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameResult(%+v)", *p)
}

type DropPartitionArgs struct {
	DbName     string   `thrift:"db_name,1"`
	TblName    string   `thrift:"tbl_name,2"`
	PartVals   []string `thrift:"part_vals,3"`
	DeleteData bool     `thrift:"deleteData,4"`
}

func NewDropPartitionArgs() *DropPartitionArgs {
	return &DropPartitionArgs{}
}

func (p *DropPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.PartVals = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem270 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem270 = v
		}
		p.PartVals = append(p.PartVals, _elem270)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *DropPartitionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.PartVals != nil {
		if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.PartVals {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionArgs(%+v)", *p)
}

type DropPartitionResult struct {
	Success bool                   `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewDropPartitionResult() *DropPartitionResult {
	return &DropPartitionResult{}
}

func (p *DropPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *DropPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *DropPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *DropPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *DropPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionResult(%+v)", *p)
}

type DropPartitionByNameArgs struct {
	DbName     string `thrift:"db_name,1"`
	TblName    string `thrift:"tbl_name,2"`
	PartName   string `thrift:"part_name,3"`
	DeleteData bool   `thrift:"deleteData,4"`
}

func NewDropPartitionByNameArgs() *DropPartitionByNameArgs {
	return &DropPartitionByNameArgs{}
}

func (p *DropPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.PartName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameArgs(%+v)", *p)
}

type DropPartitionByNameResult struct {
	Success bool                   `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewDropPartitionByNameResult() *DropPartitionByNameResult {
	return &DropPartitionByNameResult{}
}

func (p *DropPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *DropPartitionByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *DropPartitionByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *DropPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameResult(%+v)", *p)
}

type GetPartitionArgs struct {
	DbName   string   `thrift:"db_name,1"`
	TblName  string   `thrift:"tbl_name,2"`
	PartVals []string `thrift:"part_vals,3"`
}

func NewGetPartitionArgs() *GetPartitionArgs {
	return &GetPartitionArgs{}
}

func (p *GetPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.PartVals = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem271 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem271 = v
		}
		p.PartVals = append(p.PartVals, _elem271)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.PartVals != nil {
		if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.PartVals {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionArgs(%+v)", *p)
}

type GetPartitionResult struct {
	Success *Partition             `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewGetPartitionResult() *GetPartitionResult {
	return &GetPartitionResult{}
}

func (p *GetPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewPartition()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionResult(%+v)", *p)
}

type GetPartitionWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1"`
	TblName    string   `thrift:"tbl_name,2"`
	PartVals   []string `thrift:"part_vals,3"`
	UserName   string   `thrift:"user_name,4"`
	GroupNames []string `thrift:"group_names,5"`
}

func NewGetPartitionWithAuthArgs() *GetPartitionWithAuthArgs {
	return &GetPartitionWithAuthArgs{}
}

func (p *GetPartitionWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.PartVals = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem272 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem272 = v
		}
		p.PartVals = append(p.PartVals, _elem272)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.GroupNames = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem273 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem273 = v
		}
		p.GroupNames = append(p.GroupNames, _elem273)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.PartVals != nil {
		if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.PartVals {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if p.GroupNames != nil {
		if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:group_names: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.GroupNames {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:group_names: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionWithAuthArgs(%+v)", *p)
}

type GetPartitionWithAuthResult struct {
	Success *Partition             `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewGetPartitionWithAuthResult() *GetPartitionWithAuthResult {
	return &GetPartitionWithAuthResult{}
}

func (p *GetPartitionWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewPartition()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionWithAuthResult(%+v)", *p)
}

type GetPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1"`
	TblName  string `thrift:"tbl_name,2"`
	PartName string `thrift:"part_name,3"`
}

func NewGetPartitionByNameArgs() *GetPartitionByNameArgs {
	return &GetPartitionByNameArgs{}
}

func (p *GetPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.PartName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionByNameArgs(%+v)", *p)
}

type GetPartitionByNameResult struct {
	Success *Partition             `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewGetPartitionByNameResult() *GetPartitionByNameResult {
	return &GetPartitionByNameResult{}
}

func (p *GetPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewPartition()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetPartitionByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionByNameResult(%+v)", *p)
}

type GetPartitionsArgs struct {
	DbName   string `thrift:"db_name,1"`
	TblName  string `thrift:"tbl_name,2"`
	MaxParts int16  `thrift:"max_parts,3"`
}

func NewGetPartitionsArgs() *GetPartitionsArgs {
	return &GetPartitionsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsArgs(%+v)", *p)
}

type GetPartitionsResult struct {
	Success []*Partition           `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewGetPartitionsResult() *GetPartitionsResult {
	return &GetPartitionsResult{}
}

func (p *GetPartitionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Partition, 0, size)
	for i := 0; i < size; i++ {
		_elem274 := NewPartition()
		if err := _elem274.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem274)
		}
		p.Success = append(p.Success, _elem274)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionsResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsResult(%+v)", *p)
}

type GetPartitionsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1"`
	TblName    string   `thrift:"tbl_name,2"`
	MaxParts   int16    `thrift:"max_parts,3"`
	UserName   string   `thrift:"user_name,4"`
	GroupNames []string `thrift:"group_names,5"`
}

func NewGetPartitionsWithAuthArgs() *GetPartitionsWithAuthArgs {
	return &GetPartitionsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.GroupNames = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem275 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem275 = v
		}
		p.GroupNames = append(p.GroupNames, _elem275)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if p.GroupNames != nil {
		if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:group_names: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.GroupNames {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:group_names: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsWithAuthArgs(%+v)", *p)
}

type GetPartitionsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewGetPartitionsWithAuthResult() *GetPartitionsWithAuthResult {
	return &GetPartitionsWithAuthResult{}
}

func (p *GetPartitionsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Partition, 0, size)
	for i := 0; i < size; i++ {
		_elem276 := NewPartition()
		if err := _elem276.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem276)
		}
		p.Success = append(p.Success, _elem276)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsWithAuthResult(%+v)", *p)
}

type GetPartitionNamesArgs struct {
	DbName   string `thrift:"db_name,1"`
	TblName  string `thrift:"tbl_name,2"`
	MaxParts int16  `thrift:"max_parts,3"`
}

func NewGetPartitionNamesArgs() *GetPartitionNamesArgs {
	return &GetPartitionNamesArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesArgs(%+v)", *p)
}

type GetPartitionNamesResult struct {
	Success []string       `thrift:"success,0"`
	O2      *MetaException `thrift:"o2,1"`
}

func NewGetPartitionNamesResult() *GetPartitionNamesResult {
	return &GetPartitionNamesResult{}
}

func (p *GetPartitionNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem277 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem277 = v
		}
		p.Success = append(p.Success, _elem277)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionNamesResult) readField1(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesResult(%+v)", *p)
}

type GetPartitionsPsArgs struct {
	DbName   string   `thrift:"db_name,1"`
	TblName  string   `thrift:"tbl_name,2"`
	PartVals []string `thrift:"part_vals,3"`
	MaxParts int16    `thrift:"max_parts,4"`
}

func NewGetPartitionsPsArgs() *GetPartitionsPsArgs {
	return &GetPartitionsPsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.PartVals = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem278 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem278 = v
		}
		p.PartVals = append(p.PartVals, _elem278)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsPsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.PartVals != nil {
		if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.PartVals {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsArgs(%+v)", *p)
}

type GetPartitionsPsResult struct {
	Success []*Partition   `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetPartitionsPsResult() *GetPartitionsPsResult {
	return &GetPartitionsPsResult{}
}

func (p *GetPartitionsPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Partition, 0, size)
	for i := 0; i < size; i++ {
		_elem279 := NewPartition()
		if err := _elem279.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem279)
		}
		p.Success = append(p.Success, _elem279)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsPsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionsPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsResult(%+v)", *p)
}

type GetPartitionsPsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1"`
	TblName    string   `thrift:"tbl_name,2"`
	PartVals   []string `thrift:"part_vals,3"`
	MaxParts   int16    `thrift:"max_parts,4"`
	UserName   string   `thrift:"user_name,5"`
	GroupNames []string `thrift:"group_names,6"`
}

func NewGetPartitionsPsWithAuthArgs() *GetPartitionsPsWithAuthArgs {
	return &GetPartitionsPsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsPsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.PartVals = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem280 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem280 = v
		}
		p.PartVals = append(p.PartVals, _elem280)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.GroupNames = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem281 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem281 = v
		}
		p.GroupNames = append(p.GroupNames, _elem281)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.PartVals != nil {
		if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.PartVals {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if p.GroupNames != nil {
		if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:group_names: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.GroupNames {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:group_names: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsWithAuthArgs(%+v)", *p)
}

type GetPartitionsPsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewGetPartitionsPsWithAuthResult() *GetPartitionsPsWithAuthResult {
	return &GetPartitionsPsWithAuthResult{}
}

func (p *GetPartitionsPsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Partition, 0, size)
	for i := 0; i < size; i++ {
		_elem282 := NewPartition()
		if err := _elem282.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem282)
		}
		p.Success = append(p.Success, _elem282)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsWithAuthResult(%+v)", *p)
}

type GetPartitionNamesPsArgs struct {
	DbName   string   `thrift:"db_name,1"`
	TblName  string   `thrift:"tbl_name,2"`
	PartVals []string `thrift:"part_vals,3"`
	MaxParts int16    `thrift:"max_parts,4"`
}

func NewGetPartitionNamesPsArgs() *GetPartitionNamesPsArgs {
	return &GetPartitionNamesPsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionNamesPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.PartVals = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem283 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem283 = v
		}
		p.PartVals = append(p.PartVals, _elem283)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.PartVals != nil {
		if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.PartVals {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesPsArgs(%+v)", *p)
}

type GetPartitionNamesPsResult struct {
	Success []string       `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetPartitionNamesPsResult() *GetPartitionNamesPsResult {
	return &GetPartitionNamesPsResult{}
}

func (p *GetPartitionNamesPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem284 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem284 = v
		}
		p.Success = append(p.Success, _elem284)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionNamesPsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesPsResult(%+v)", *p)
}

type GetPartitionsByFilterArgs struct {
	DbName   string `thrift:"db_name,1"`
	TblName  string `thrift:"tbl_name,2"`
	Filter   string `thrift:"filter,3"`
	MaxParts int16  `thrift:"max_parts,4"`
}

func NewGetPartitionsByFilterArgs() *GetPartitionsByFilterArgs {
	return &GetPartitionsByFilterArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsByFilterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Filter = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:filter: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Filter)); err != nil {
		return fmt.Errorf("%T.filter (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:filter: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByFilterArgs(%+v)", *p)
}

type GetPartitionsByFilterResult struct {
	Success []*Partition           `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewGetPartitionsByFilterResult() *GetPartitionsByFilterResult {
	return &GetPartitionsByFilterResult{}
}

func (p *GetPartitionsByFilterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Partition, 0, size)
	for i := 0; i < size; i++ {
		_elem285 := NewPartition()
		if err := _elem285.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem285)
		}
		p.Success = append(p.Success, _elem285)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPartitionsByFilterResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByFilterResult(%+v)", *p)
}

type AlterPartitionArgs struct {
	DbName  string     `thrift:"db_name,1"`
	TblName string     `thrift:"tbl_name,2"`
	NewPart *Partition `thrift:"new_part,3"`
}

func NewAlterPartitionArgs() *AlterPartitionArgs {
	return &AlterPartitionArgs{}
}

func (p *AlterPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AlterPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterPartitionArgs) readField3(iprot thrift.TProtocol) error {
	p.NewPart = NewPartition()
	if err := p.NewPart.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart)
	}
	return nil
}

func (p *AlterPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NewPart != nil {
		if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:new_part: %s", p, err)
		}
		if err := p.NewPart.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NewPart)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:new_part: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionArgs(%+v)", *p)
}

type AlterPartitionResult struct {
	O1 *InvalidOperationException `thrift:"o1,1"`
	O2 *MetaException             `thrift:"o2,2"`
}

func NewAlterPartitionResult() *AlterPartitionResult {
	return &AlterPartitionResult{}
}

func (p *AlterPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewInvalidOperationException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AlterPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AlterPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionResult(%+v)", *p)
}

type GetConfigValueArgs struct {
	Name         string `thrift:"name,1"`
	DefaultValue string `thrift:"defaultValue,2"`
}

func NewGetConfigValueArgs() *GetConfigValueArgs {
	return &GetConfigValueArgs{}
}

func (p *GetConfigValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetConfigValueArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetConfigValueArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.DefaultValue = v
	}
	return nil
}

func (p *GetConfigValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetConfigValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetConfigValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:defaultValue: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DefaultValue)); err != nil {
		return fmt.Errorf("%T.defaultValue (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:defaultValue: %s", p, err)
	}
	return err
}

func (p *GetConfigValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetConfigValueArgs(%+v)", *p)
}

type GetConfigValueResult struct {
	Success string                      `thrift:"success,0"`
	O1      *ConfigValSecurityException `thrift:"o1,1"`
}

func NewGetConfigValueResult() *GetConfigValueResult {
	return &GetConfigValueResult{}
}

func (p *GetConfigValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetConfigValueResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetConfigValueResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewConfigValSecurityException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetConfigValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetConfigValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetConfigValueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetConfigValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetConfigValueResult(%+v)", *p)
}

type PartitionNameToValsArgs struct {
	PartName string `thrift:"part_name,1"`
}

func NewPartitionNameToValsArgs() *PartitionNameToValsArgs {
	return &PartitionNameToValsArgs{}
}

func (p *PartitionNameToValsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToValsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.PartName = v
	}
	return nil
}

func (p *PartitionNameToValsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:part_name: %s", p, err)
	}
	return err
}

func (p *PartitionNameToValsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToValsArgs(%+v)", *p)
}

type PartitionNameToValsResult struct {
	Success []string       `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewPartitionNameToValsResult() *PartitionNameToValsResult {
	return &PartitionNameToValsResult{}
}

func (p *PartitionNameToValsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToValsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem286 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem286 = v
		}
		p.Success = append(p.Success, _elem286)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *PartitionNameToValsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *PartitionNameToValsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToValsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToValsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToValsResult(%+v)", *p)
}

type PartitionNameToSpecArgs struct {
	PartName string `thrift:"part_name,1"`
}

func NewPartitionNameToSpecArgs() *PartitionNameToSpecArgs {
	return &PartitionNameToSpecArgs{}
}

func (p *PartitionNameToSpecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToSpecArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.PartName = v
	}
	return nil
}

func (p *PartitionNameToSpecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:part_name: %s", p, err)
	}
	return err
}

func (p *PartitionNameToSpecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToSpecArgs(%+v)", *p)
}

type PartitionNameToSpecResult struct {
	Success map[string]string `thrift:"success,0"`
	O1      *MetaException    `thrift:"o1,1"`
}

func NewPartitionNameToSpecResult() *PartitionNameToSpecResult {
	return &PartitionNameToSpecResult{}
}

func (p *PartitionNameToSpecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Success = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key287 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key287 = v
		}
		var _val288 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val288 = v
		}
		p.Success[_key287] = _val288
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *PartitionNameToSpecResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *PartitionNameToSpecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToSpecResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToSpecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToSpecResult(%+v)", *p)
}

type AddIndexArgs struct {
	NewIndex   *Index `thrift:"new_index,1"`
	IndexTable *Table `thrift:"index_table,2"`
}

func NewAddIndexArgs() *AddIndexArgs {
	return &AddIndexArgs{}
}

func (p *AddIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddIndexArgs) readField1(iprot thrift.TProtocol) error {
	p.NewIndex = NewIndex()
	if err := p.NewIndex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewIndex)
	}
	return nil
}

func (p *AddIndexArgs) readField2(iprot thrift.TProtocol) error {
	p.IndexTable = NewTable()
	if err := p.IndexTable.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IndexTable)
	}
	return nil
}

func (p *AddIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.NewIndex != nil {
		if err := oprot.WriteFieldBegin("new_index", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:new_index: %s", p, err)
		}
		if err := p.NewIndex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NewIndex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:new_index: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IndexTable != nil {
		if err := oprot.WriteFieldBegin("index_table", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:index_table: %s", p, err)
		}
		if err := p.IndexTable.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.IndexTable)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:index_table: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIndexArgs(%+v)", *p)
}

type AddIndexResult struct {
	Success *Index                  `thrift:"success,0"`
	O1      *InvalidObjectException `thrift:"o1,1"`
	O2      *AlreadyExistsException `thrift:"o2,2"`
	O3      *MetaException          `thrift:"o3,3"`
}

func NewAddIndexResult() *AddIndexResult {
	return &AddIndexResult{}
}

func (p *AddIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddIndexResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewIndex()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AddIndexResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewInvalidObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AddIndexResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewAlreadyExistsException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AddIndexResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = NewMetaException()
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3)
	}
	return nil
}

func (p *AddIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O3 != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.O3 != nil {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIndexResult(%+v)", *p)
}

type AlterIndexArgs struct {
	Dbname      string `thrift:"dbname,1"`
	BaseTblName string `thrift:"base_tbl_name,2"`
	IdxName     string `thrift:"idx_name,3"`
	NewIdx      *Index `thrift:"new_idx,4"`
}

func NewAlterIndexArgs() *AlterIndexArgs {
	return &AlterIndexArgs{}
}

func (p *AlterIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterIndexArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterIndexArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.BaseTblName = v
	}
	return nil
}

func (p *AlterIndexArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IdxName = v
	}
	return nil
}

func (p *AlterIndexArgs) readField4(iprot thrift.TProtocol) error {
	p.NewIdx = NewIndex()
	if err := p.NewIdx.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewIdx)
	}
	return nil
}

func (p *AlterIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("base_tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:base_tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BaseTblName)); err != nil {
		return fmt.Errorf("%T.base_tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:base_tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idx_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:idx_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IdxName)); err != nil {
		return fmt.Errorf("%T.idx_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:idx_name: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.NewIdx != nil {
		if err := oprot.WriteFieldBegin("new_idx", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:new_idx: %s", p, err)
		}
		if err := p.NewIdx.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NewIdx)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:new_idx: %s", p, err)
		}
	}
	return err
}

func (p *AlterIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterIndexArgs(%+v)", *p)
}

type AlterIndexResult struct {
	O1 *InvalidOperationException `thrift:"o1,1"`
	O2 *MetaException             `thrift:"o2,2"`
}

func NewAlterIndexResult() *AlterIndexResult {
	return &AlterIndexResult{}
}

func (p *AlterIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterIndexResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewInvalidOperationException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *AlterIndexResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *AlterIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterIndexResult(%+v)", *p)
}

type DropIndexByNameArgs struct {
	DbName     string `thrift:"db_name,1"`
	TblName    string `thrift:"tbl_name,2"`
	IndexName  string `thrift:"index_name,3"`
	DeleteData bool   `thrift:"deleteData,4"`
}

func NewDropIndexByNameArgs() *DropIndexByNameArgs {
	return &DropIndexByNameArgs{}
}

func (p *DropIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropIndexByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.index_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropIndexByNameArgs(%+v)", *p)
}

type DropIndexByNameResult struct {
	Success bool                   `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewDropIndexByNameResult() *DropIndexByNameResult {
	return &DropIndexByNameResult{}
}

func (p *DropIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropIndexByNameResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *DropIndexByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *DropIndexByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *DropIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropIndexByNameResult(%+v)", *p)
}

type GetIndexByNameArgs struct {
	DbName    string `thrift:"db_name,1"`
	TblName   string `thrift:"tbl_name,2"`
	IndexName string `thrift:"index_name,3"`
}

func NewGetIndexByNameArgs() *GetIndexByNameArgs {
	return &GetIndexByNameArgs{}
}

func (p *GetIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.index_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexByNameArgs(%+v)", *p)
}

type GetIndexByNameResult struct {
	Success *Index                 `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
	O2      *NoSuchObjectException `thrift:"o2,2"`
}

func NewGetIndexByNameResult() *GetIndexByNameResult {
	return &GetIndexByNameResult{}
}

func (p *GetIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewIndex()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetIndexByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetIndexByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewNoSuchObjectException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexByNameResult(%+v)", *p)
}

type GetIndexesArgs struct {
	DbName     string `thrift:"db_name,1"`
	TblName    string `thrift:"tbl_name,2"`
	MaxIndexes int16  `thrift:"max_indexes,3"`
}

func NewGetIndexesArgs() *GetIndexesArgs {
	return &GetIndexesArgs{
		MaxIndexes: -1,
	}
}

func (p *GetIndexesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *GetIndexesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_indexes: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return fmt.Errorf("%T.max_indexes (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_indexes: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexesArgs(%+v)", *p)
}

type GetIndexesResult struct {
	Success []*Index               `thrift:"success,0"`
	O1      *NoSuchObjectException `thrift:"o1,1"`
	O2      *MetaException         `thrift:"o2,2"`
}

func NewGetIndexesResult() *GetIndexesResult {
	return &GetIndexesResult{}
}

func (p *GetIndexesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Index, 0, size)
	for i := 0; i < size; i++ {
		_elem289 := NewIndex()
		if err := _elem289.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem289)
		}
		p.Success = append(p.Success, _elem289)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetIndexesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewNoSuchObjectException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetIndexesResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetIndexesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexesResult(%+v)", *p)
}

type GetIndexNamesArgs struct {
	DbName     string `thrift:"db_name,1"`
	TblName    string `thrift:"tbl_name,2"`
	MaxIndexes int16  `thrift:"max_indexes,3"`
}

func NewGetIndexNamesArgs() *GetIndexNamesArgs {
	return &GetIndexNamesArgs{
		MaxIndexes: -1,
	}
}

func (p *GetIndexNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexNamesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexNamesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexNamesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *GetIndexNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_indexes: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return fmt.Errorf("%T.max_indexes (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_indexes: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexNamesArgs(%+v)", *p)
}

type GetIndexNamesResult struct {
	Success []string       `thrift:"success,0"`
	O2      *MetaException `thrift:"o2,1"`
}

func NewGetIndexNamesResult() *GetIndexNamesResult {
	return &GetIndexNamesResult{}
}

func (p *GetIndexNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem290 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem290 = v
		}
		p.Success = append(p.Success, _elem290)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetIndexNamesResult) readField1(iprot thrift.TProtocol) error {
	p.O2 = NewMetaException()
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2)
	}
	return nil
}

func (p *GetIndexNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O2 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O2 != nil {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexNamesResult(%+v)", *p)
}

type CreateRoleArgs struct {
	Role *Role `thrift:"role,1"`
}

func NewCreateRoleArgs() *CreateRoleArgs {
	return &CreateRoleArgs{}
}

func (p *CreateRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Role = NewRole()
	if err := p.Role.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Role)
	}
	return nil
}

func (p *CreateRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Role != nil {
		if err := oprot.WriteFieldBegin("role", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:role: %s", p, err)
		}
		if err := p.Role.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Role)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:role: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleArgs(%+v)", *p)
}

type CreateRoleResult struct {
	Success bool           `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewCreateRoleResult() *CreateRoleResult {
	return &CreateRoleResult{}
}

func (p *CreateRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *CreateRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *CreateRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *CreateRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleResult(%+v)", *p)
}

type DropRoleArgs struct {
	RoleName string `thrift:"role_name,1"`
}

func NewDropRoleArgs() *DropRoleArgs {
	return &DropRoleArgs{}
}

func (p *DropRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropRoleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *DropRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *DropRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropRoleArgs(%+v)", *p)
}

type DropRoleResult struct {
	Success bool           `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewDropRoleResult() *DropRoleResult {
	return &DropRoleResult{}
}

func (p *DropRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *DropRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *DropRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DropRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *DropRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropRoleResult(%+v)", *p)
}

type GetRoleNamesArgs struct {
}

func NewGetRoleNamesArgs() *GetRoleNamesArgs {
	return &GetRoleNamesArgs{}
}

func (p *GetRoleNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleNamesArgs(%+v)", *p)
}

type GetRoleNamesResult struct {
	Success []string       `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetRoleNamesResult() *GetRoleNamesResult {
	return &GetRoleNamesResult{}
}

func (p *GetRoleNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem291 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem291 = v
		}
		p.Success = append(p.Success, _elem291)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetRoleNamesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetRoleNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleNamesResult(%+v)", *p)
}

type GrantRoleArgs struct {
	RoleName      string        `thrift:"role_name,1"`
	PrincipalName string        `thrift:"principal_name,2"`
	PrincipalType PrincipalType `thrift:"principal_type,3"`
	Grantor       string        `thrift:"grantor,4"`
	GrantorType   PrincipalType `thrift:"grantorType,5"`
	GrantOption   bool          `thrift:"grant_option,6"`
}

func NewGrantRoleArgs() *GrantRoleArgs {
	return &GrantRoleArgs{
		PrincipalType: math.MinInt32 - 1, // unset sentinal value

		GrantorType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *GrantRoleArgs) IsSetPrincipalType() bool {
	return int64(p.PrincipalType) != math.MinInt32-1
}

func (p *GrantRoleArgs) IsSetGrantorType() bool {
	return int64(p.GrantorType) != math.MinInt32-1
}

func (p *GrantRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantRoleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *GrantRoleArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *GrantRoleArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.PrincipalType = PrincipalType(v)
	}
	return nil
}

func (p *GrantRoleArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Grantor = v
	}
	return nil
}

func (p *GrantRoleArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.GrantorType = PrincipalType(v)
	}
	return nil
}

func (p *GrantRoleArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.GrantOption = v
	}
	return nil
}

func (p *GrantRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_name: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrincipalType() {
		if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:principal_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
			return fmt.Errorf("%T.principal_type (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:principal_type: %s", p, err)
		}
	}
	return err
}

func (p *GrantRoleArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Grantor)); err != nil {
		return fmt.Errorf("%T.grantor (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantor: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrantorType() {
		if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:grantorType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
			return fmt.Errorf("%T.grantorType (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:grantorType: %s", p, err)
		}
	}
	return err
}

func (p *GrantRoleArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant_option", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:grant_option: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
		return fmt.Errorf("%T.grant_option (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:grant_option: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantRoleArgs(%+v)", *p)
}

type GrantRoleResult struct {
	Success bool           `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGrantRoleResult() *GrantRoleResult {
	return &GrantRoleResult{}
}

func (p *GrantRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GrantRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GrantRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GrantRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GrantRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantRoleResult(%+v)", *p)
}

type RevokeRoleArgs struct {
	RoleName      string        `thrift:"role_name,1"`
	PrincipalName string        `thrift:"principal_name,2"`
	PrincipalType PrincipalType `thrift:"principal_type,3"`
}

func NewRevokeRoleArgs() *RevokeRoleArgs {
	return &RevokeRoleArgs{
		PrincipalType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *RevokeRoleArgs) IsSetPrincipalType() bool {
	return int64(p.PrincipalType) != math.MinInt32-1
}

func (p *RevokeRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeRoleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *RevokeRoleArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *RevokeRoleArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.PrincipalType = PrincipalType(v)
	}
	return nil
}

func (p *RevokeRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_name: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrincipalType() {
		if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:principal_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
			return fmt.Errorf("%T.principal_type (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:principal_type: %s", p, err)
		}
	}
	return err
}

func (p *RevokeRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeRoleArgs(%+v)", *p)
}

type RevokeRoleResult struct {
	Success bool           `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewRevokeRoleResult() *RevokeRoleResult {
	return &RevokeRoleResult{}
}

func (p *RevokeRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *RevokeRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *RevokeRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *RevokeRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RevokeRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeRoleResult(%+v)", *p)
}

type ListRolesArgs struct {
	PrincipalName string        `thrift:"principal_name,1"`
	PrincipalType PrincipalType `thrift:"principal_type,2"`
}

func NewListRolesArgs() *ListRolesArgs {
	return &ListRolesArgs{
		PrincipalType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *ListRolesArgs) IsSetPrincipalType() bool {
	return int64(p.PrincipalType) != math.MinInt32-1
}

func (p *ListRolesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListRolesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ListRolesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PrincipalType = PrincipalType(v)
	}
	return nil
}

func (p *ListRolesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principal_name: %s", p, err)
	}
	return err
}

func (p *ListRolesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrincipalType() {
		if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:principal_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
			return fmt.Errorf("%T.principal_type (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:principal_type: %s", p, err)
		}
	}
	return err
}

func (p *ListRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListRolesArgs(%+v)", *p)
}

type ListRolesResult struct {
	Success []*Role        `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewListRolesResult() *ListRolesResult {
	return &ListRolesResult{}
}

func (p *ListRolesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListRolesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Role, 0, size)
	for i := 0; i < size; i++ {
		_elem292 := NewRole()
		if err := _elem292.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem292)
		}
		p.Success = append(p.Success, _elem292)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListRolesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *ListRolesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *ListRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListRolesResult(%+v)", *p)
}

type GetPrivilegeSetArgs struct {
	HiveObject *HiveObjectRef `thrift:"hiveObject,1"`
	UserName   string         `thrift:"user_name,2"`
	GroupNames []string       `thrift:"group_names,3"`
}

func NewGetPrivilegeSetArgs() *GetPrivilegeSetArgs {
	return &GetPrivilegeSetArgs{}
}

func (p *GetPrivilegeSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) readField1(iprot thrift.TProtocol) error {
	p.HiveObject = NewHiveObjectRef()
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPrivilegeSetArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.GroupNames = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem293 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem293 = v
		}
		p.GroupNames = append(p.GroupNames, _elem293)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetPrivilegeSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.HiveObject != nil {
		if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:hiveObject: %s", p, err)
		}
		if err := p.HiveObject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.HiveObject)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:hiveObject: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_name: %s", p, err)
	}
	return err
}

func (p *GetPrivilegeSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.GroupNames != nil {
		if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:group_names: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.GroupNames {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:group_names: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivilegeSetArgs(%+v)", *p)
}

type GetPrivilegeSetResult struct {
	Success *PrincipalPrivilegeSet `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
}

func NewGetPrivilegeSetResult() *GetPrivilegeSetResult {
	return &GetPrivilegeSetResult{}
}

func (p *GetPrivilegeSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewPrincipalPrivilegeSet()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetPrivilegeSetResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetPrivilegeSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivilegeSetResult(%+v)", *p)
}

type ListPrivilegesArgs struct {
	PrincipalName string         `thrift:"principal_name,1"`
	PrincipalType PrincipalType  `thrift:"principal_type,2"`
	HiveObject    *HiveObjectRef `thrift:"hiveObject,3"`
}

func NewListPrivilegesArgs() *ListPrivilegesArgs {
	return &ListPrivilegesArgs{
		PrincipalType: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *ListPrivilegesArgs) IsSetPrincipalType() bool {
	return int64(p.PrincipalType) != math.MinInt32-1
}

func (p *ListPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPrivilegesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ListPrivilegesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PrincipalType = PrincipalType(v)
	}
	return nil
}

func (p *ListPrivilegesArgs) readField3(iprot thrift.TProtocol) error {
	p.HiveObject = NewHiveObjectRef()
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject)
	}
	return nil
}

func (p *ListPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principal_name: %s", p, err)
	}
	return err
}

func (p *ListPrivilegesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrincipalType() {
		if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:principal_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
			return fmt.Errorf("%T.principal_type (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:principal_type: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.HiveObject != nil {
		if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:hiveObject: %s", p, err)
		}
		if err := p.HiveObject.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.HiveObject)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:hiveObject: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPrivilegesArgs(%+v)", *p)
}

type ListPrivilegesResult struct {
	Success []*HiveObjectPrivilege `thrift:"success,0"`
	O1      *MetaException         `thrift:"o1,1"`
}

func NewListPrivilegesResult() *ListPrivilegesResult {
	return &ListPrivilegesResult{}
}

func (p *ListPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPrivilegesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*HiveObjectPrivilege, 0, size)
	for i := 0; i < size; i++ {
		_elem294 := NewHiveObjectPrivilege()
		if err := _elem294.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem294)
		}
		p.Success = append(p.Success, _elem294)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListPrivilegesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *ListPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPrivilegesResult(%+v)", *p)
}

type GrantPrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1"`
}

func NewGrantPrivilegesArgs() *GrantPrivilegesArgs {
	return &GrantPrivilegesArgs{}
}

func (p *GrantPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) readField1(iprot thrift.TProtocol) error {
	p.Privileges = NewPrivilegeBag()
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges)
	}
	return nil
}

func (p *GrantPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Privileges != nil {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
		}
	}
	return err
}

func (p *GrantPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantPrivilegesArgs(%+v)", *p)
}

type GrantPrivilegesResult struct {
	Success bool           `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGrantPrivilegesResult() *GrantPrivilegesResult {
	return &GrantPrivilegesResult{}
}

func (p *GrantPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantPrivilegesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GrantPrivilegesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GrantPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GrantPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GrantPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantPrivilegesResult(%+v)", *p)
}

type RevokePrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1"`
}

func NewRevokePrivilegesArgs() *RevokePrivilegesArgs {
	return &RevokePrivilegesArgs{}
}

func (p *RevokePrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) readField1(iprot thrift.TProtocol) error {
	p.Privileges = NewPrivilegeBag()
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges)
	}
	return nil
}

func (p *RevokePrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Privileges != nil {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
		}
	}
	return err
}

func (p *RevokePrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePrivilegesArgs(%+v)", *p)
}

type RevokePrivilegesResult struct {
	Success bool           `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewRevokePrivilegesResult() *RevokePrivilegesResult {
	return &RevokePrivilegesResult{}
}

func (p *RevokePrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePrivilegesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *RevokePrivilegesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *RevokePrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *RevokePrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RevokePrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePrivilegesResult(%+v)", *p)
}

type GetDelegationTokenArgs struct {
	RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,1"`
}

func NewGetDelegationTokenArgs() *GetDelegationTokenArgs {
	return &GetDelegationTokenArgs{}
}

func (p *GetDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RenewerKerberosPrincipalName = v
	}
	return nil
}

func (p *GetDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
		return fmt.Errorf("%T.renewer_kerberos_principal_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenArgs(%+v)", *p)
}

type GetDelegationTokenResult struct {
	Success string         `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetDelegationTokenResult() *GetDelegationTokenResult {
	return &GetDelegationTokenResult{}
}

func (p *GetDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetDelegationTokenResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenResult(%+v)", *p)
}

type GetDelegationTokenWithSignatureArgs struct {
	RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,1"`
	TokenSignature               string `thrift:"token_signature,2"`
}

func NewGetDelegationTokenWithSignatureArgs() *GetDelegationTokenWithSignatureArgs {
	return &GetDelegationTokenWithSignatureArgs{}
}

func (p *GetDelegationTokenWithSignatureArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RenewerKerberosPrincipalName = v
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TokenSignature = v
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_with_signature_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
		return fmt.Errorf("%T.renewer_kerberos_principal_name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenWithSignatureArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_signature", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:token_signature: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenSignature)); err != nil {
		return fmt.Errorf("%T.token_signature (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:token_signature: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenWithSignatureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenWithSignatureArgs(%+v)", *p)
}

type GetDelegationTokenWithSignatureResult struct {
	Success string         `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewGetDelegationTokenWithSignatureResult() *GetDelegationTokenWithSignatureResult {
	return &GetDelegationTokenWithSignatureResult{}
}

func (p *GetDelegationTokenWithSignatureResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_with_signature_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenWithSignatureResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenWithSignatureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenWithSignatureResult(%+v)", *p)
}

type RenewDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1"`
}

func NewRenewDelegationTokenArgs() *RenewDelegationTokenArgs {
	return &RenewDelegationTokenArgs{}
}

func (p *RenewDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *RenewDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:token_str_form: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return fmt.Errorf("%T.token_str_form (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:token_str_form: %s", p, err)
	}
	return err
}

func (p *RenewDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewDelegationTokenArgs(%+v)", *p)
}

type RenewDelegationTokenResult struct {
	Success int64          `thrift:"success,0"`
	O1      *MetaException `thrift:"o1,1"`
}

func NewRenewDelegationTokenResult() *RenewDelegationTokenResult {
	return &RenewDelegationTokenResult{}
}

func (p *RenewDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *RenewDelegationTokenResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *RenewDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *RenewDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RenewDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewDelegationTokenResult(%+v)", *p)
}

type CancelDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1"`
}

func NewCancelDelegationTokenArgs() *CancelDelegationTokenArgs {
	return &CancelDelegationTokenArgs{}
}

func (p *CancelDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *CancelDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:token_str_form: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return fmt.Errorf("%T.token_str_form (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:token_str_form: %s", p, err)
	}
	return err
}

func (p *CancelDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelDelegationTokenArgs(%+v)", *p)
}

type CancelDelegationTokenResult struct {
	O1 *MetaException `thrift:"o1,1"`
}

func NewCancelDelegationTokenResult() *CancelDelegationTokenResult {
	return &CancelDelegationTokenResult{}
}

func (p *CancelDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = NewMetaException()
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1)
	}
	return nil
}

func (p *CancelDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.O1 != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.O1 != nil {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CancelDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelDelegationTokenResult(%+v)", *p)
}
