// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/mattbaird/hive/thriftlib/hive_metastore"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
	fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
	fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
	fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token_with_signature(string renewer_kerberos_principal_name, string token_signature)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  string getName()")
	fmt.Fprintln(os.Stderr, "  string getVersion()")
	fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
	fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
	fmt.Fprintln(os.Stderr, "   getCounters()")
	fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
	fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
	fmt.Fprintln(os.Stderr, "  string getOption(string key)")
	fmt.Fprintln(os.Stderr, "   getOptions()")
	fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
	fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
	fmt.Fprintln(os.Stderr, "  void reinitialize()")
	fmt.Fprintln(os.Stderr, "  void shutdown()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := hive_metastore.NewThriftHiveMetastoreClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg295 := flag.Arg(1)
		mbTrans296 := thrift.NewTMemoryBufferLen(len(arg295))
		defer mbTrans296.Close()
		_, err297 := mbTrans296.WriteString(arg295)
		if err297 != nil {
			Usage()
			return
		}
		factory298 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt299 := factory298.GetProtocol(mbTrans296)
		argvalue0 := hive_metastore.NewDatabase()
		err300 := argvalue0.Read(jsProt299)
		if err300 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.DropDatabase(value0, value1))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases())
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg306 := flag.Arg(2)
		mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
		defer mbTrans307.Close()
		_, err308 := mbTrans307.WriteString(arg306)
		if err308 != nil {
			Usage()
			return
		}
		factory309 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt310 := factory309.GetProtocol(mbTrans307)
		argvalue1 := hive_metastore.NewDatabase()
		err311 := argvalue1.Read(jsProt310)
		if err311 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg313 := flag.Arg(1)
		mbTrans314 := thrift.NewTMemoryBufferLen(len(arg313))
		defer mbTrans314.Close()
		_, err315 := mbTrans314.WriteString(arg313)
		if err315 != nil {
			Usage()
			return
		}
		factory316 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt317 := factory316.GetProtocol(mbTrans314)
		argvalue0 := hive_metastore.NewType()
		err318 := argvalue0.Read(jsProt317)
		if err318 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(value0, value1))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(value0, value1))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg325 := flag.Arg(1)
		mbTrans326 := thrift.NewTMemoryBufferLen(len(arg325))
		defer mbTrans326.Close()
		_, err327 := mbTrans326.WriteString(arg325)
		if err327 != nil {
			Usage()
			return
		}
		factory328 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt329 := factory328.GetProtocol(mbTrans326)
		argvalue0 := hive_metastore.NewTable()
		err330 := argvalue0.Read(jsProt329)
		if err330 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(value0))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(value0, value1))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(value0, value1))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg341 := flag.Arg(3)
		mbTrans342 := thrift.NewTMemoryBufferLen(len(arg341))
		defer mbTrans342.Close()
		_, err343 := mbTrans342.WriteString(arg341)
		if err343 != nil {
			Usage()
			return
		}
		factory344 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt345 := factory344.GetProtocol(mbTrans342)
		argvalue2 := hive_metastore.NewTable()
		err346 := argvalue2.Read(jsProt345)
		if err346 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg347 := flag.Arg(1)
		mbTrans348 := thrift.NewTMemoryBufferLen(len(arg347))
		defer mbTrans348.Close()
		_, err349 := mbTrans348.WriteString(arg347)
		if err349 != nil {
			Usage()
			return
		}
		factory350 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt351 := factory350.GetProtocol(mbTrans348)
		argvalue0 := hive_metastore.NewPartition()
		err352 := argvalue0.Read(jsProt351)
		if err352 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg355 := flag.Arg(3)
		mbTrans356 := thrift.NewTMemoryBufferLen(len(arg355))
		defer mbTrans356.Close()
		_, err357 := mbTrans356.WriteString(arg355)
		if err357 != nil {
			Usage()
			return
		}
		factory358 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt359 := factory358.GetProtocol(mbTrans356)
		containerStruct2 := hive_metastore.NewAppendPartitionArgs()
		err360 := containerStruct2.ReadField3(jsProt359)
		if err360 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg366 := flag.Arg(3)
		mbTrans367 := thrift.NewTMemoryBufferLen(len(arg366))
		defer mbTrans367.Close()
		_, err368 := mbTrans367.WriteString(arg366)
		if err368 != nil {
			Usage()
			return
		}
		factory369 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt370 := factory369.GetProtocol(mbTrans367)
		containerStruct2 := hive_metastore.NewDropPartitionArgs()
		err371 := containerStruct2.ReadField3(jsProt370)
		if err371 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg379 := flag.Arg(3)
		mbTrans380 := thrift.NewTMemoryBufferLen(len(arg379))
		defer mbTrans380.Close()
		_, err381 := mbTrans380.WriteString(arg379)
		if err381 != nil {
			Usage()
			return
		}
		factory382 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt383 := factory382.GetProtocol(mbTrans380)
		containerStruct2 := hive_metastore.NewGetPartitionArgs()
		err384 := containerStruct2.ReadField3(jsProt383)
		if err384 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg387 := flag.Arg(3)
		mbTrans388 := thrift.NewTMemoryBufferLen(len(arg387))
		defer mbTrans388.Close()
		_, err389 := mbTrans388.WriteString(arg387)
		if err389 != nil {
			Usage()
			return
		}
		factory390 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt391 := factory390.GetProtocol(mbTrans388)
		containerStruct2 := hive_metastore.NewGetPartitionWithAuthArgs()
		err392 := containerStruct2.ReadField3(jsProt391)
		if err392 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg394 := flag.Arg(5)
		mbTrans395 := thrift.NewTMemoryBufferLen(len(arg394))
		defer mbTrans395.Close()
		_, err396 := mbTrans395.WriteString(arg394)
		if err396 != nil {
			Usage()
			return
		}
		factory397 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt398 := factory397.GetProtocol(mbTrans395)
		containerStruct4 := hive_metastore.NewGetPartitionWithAuthArgs()
		err399 := containerStruct4.ReadField5(jsProt398)
		if err399 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err405 := (strconv.Atoi(flag.Arg(3)))
		if err405 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err408 := (strconv.Atoi(flag.Arg(3)))
		if err408 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg410 := flag.Arg(5)
		mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
		defer mbTrans411.Close()
		_, err412 := mbTrans411.WriteString(arg410)
		if err412 != nil {
			Usage()
			return
		}
		factory413 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt414 := factory413.GetProtocol(mbTrans411)
		containerStruct4 := hive_metastore.NewGetPartitionsWithAuthArgs()
		err415 := containerStruct4.ReadField5(jsProt414)
		if err415 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err418 := (strconv.Atoi(flag.Arg(3)))
		if err418 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg421 := flag.Arg(3)
		mbTrans422 := thrift.NewTMemoryBufferLen(len(arg421))
		defer mbTrans422.Close()
		_, err423 := mbTrans422.WriteString(arg421)
		if err423 != nil {
			Usage()
			return
		}
		factory424 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt425 := factory424.GetProtocol(mbTrans422)
		containerStruct2 := hive_metastore.NewGetPartitionsPsArgs()
		err426 := containerStruct2.ReadField3(jsProt425)
		if err426 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err427 := (strconv.Atoi(flag.Arg(4)))
		if err427 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg430 := flag.Arg(3)
		mbTrans431 := thrift.NewTMemoryBufferLen(len(arg430))
		defer mbTrans431.Close()
		_, err432 := mbTrans431.WriteString(arg430)
		if err432 != nil {
			Usage()
			return
		}
		factory433 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt434 := factory433.GetProtocol(mbTrans431)
		containerStruct2 := hive_metastore.NewGetPartitionsPsWithAuthArgs()
		err435 := containerStruct2.ReadField3(jsProt434)
		if err435 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err436 := (strconv.Atoi(flag.Arg(4)))
		if err436 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg438 := flag.Arg(6)
		mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
		defer mbTrans439.Close()
		_, err440 := mbTrans439.WriteString(arg438)
		if err440 != nil {
			Usage()
			return
		}
		factory441 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt442 := factory441.GetProtocol(mbTrans439)
		containerStruct5 := hive_metastore.NewGetPartitionsPsWithAuthArgs()
		err443 := containerStruct5.ReadField6(jsProt442)
		if err443 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg446 := flag.Arg(3)
		mbTrans447 := thrift.NewTMemoryBufferLen(len(arg446))
		defer mbTrans447.Close()
		_, err448 := mbTrans447.WriteString(arg446)
		if err448 != nil {
			Usage()
			return
		}
		factory449 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt450 := factory449.GetProtocol(mbTrans447)
		containerStruct2 := hive_metastore.NewGetPartitionNamesPsArgs()
		err451 := containerStruct2.ReadField3(jsProt450)
		if err451 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err452 := (strconv.Atoi(flag.Arg(4)))
		if err452 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err456 := (strconv.Atoi(flag.Arg(4)))
		if err456 != nil {
			Usage()
			return
		}
		argvalue3 := byte(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg459 := flag.Arg(3)
		mbTrans460 := thrift.NewTMemoryBufferLen(len(arg459))
		defer mbTrans460.Close()
		_, err461 := mbTrans460.WriteString(arg459)
		if err461 != nil {
			Usage()
			return
		}
		factory462 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt463 := factory462.GetProtocol(mbTrans460)
		argvalue2 := hive_metastore.NewPartition()
		err464 := argvalue2.Read(jsProt463)
		if err464 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(value0))
		fmt.Print("\n")
		break
	case "add_index":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
			flag.Usage()
		}
		arg469 := flag.Arg(1)
		mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
		defer mbTrans470.Close()
		_, err471 := mbTrans470.WriteString(arg469)
		if err471 != nil {
			Usage()
			return
		}
		factory472 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt473 := factory472.GetProtocol(mbTrans470)
		argvalue0 := hive_metastore.NewIndex()
		err474 := argvalue0.Read(jsProt473)
		if err474 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg475 := flag.Arg(2)
		mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
		defer mbTrans476.Close()
		_, err477 := mbTrans476.WriteString(arg475)
		if err477 != nil {
			Usage()
			return
		}
		factory478 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt479 := factory478.GetProtocol(mbTrans476)
		argvalue1 := hive_metastore.NewTable()
		err480 := argvalue1.Read(jsProt479)
		if err480 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddIndex(value0, value1))
		fmt.Print("\n")
		break
	case "alter_index":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg484 := flag.Arg(4)
		mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
		defer mbTrans485.Close()
		_, err486 := mbTrans485.WriteString(arg484)
		if err486 != nil {
			Usage()
			return
		}
		factory487 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt488 := factory487.GetProtocol(mbTrans485)
		argvalue3 := hive_metastore.NewIndex()
		err489 := argvalue3.Read(jsProt488)
		if err489 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterIndex(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_index_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropIndexByName(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_index_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetIndexByName(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_indexes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err499 := (strconv.Atoi(flag.Arg(3)))
		if err499 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexes(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_index_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err502 := (strconv.Atoi(flag.Arg(3)))
		if err502 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexNames(value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg503 := flag.Arg(1)
		mbTrans504 := thrift.NewTMemoryBufferLen(len(arg503))
		defer mbTrans504.Close()
		_, err505 := mbTrans504.WriteString(arg503)
		if err505 != nil {
			Usage()
			return
		}
		factory506 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt507 := factory506.GetProtocol(mbTrans504)
		argvalue0 := hive_metastore.NewRole()
		err508 := argvalue0.Read(jsProt507)
		if err508 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames())
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive_metastore.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(value0, value1))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg517 := flag.Arg(1)
		mbTrans518 := thrift.NewTMemoryBufferLen(len(arg517))
		defer mbTrans518.Close()
		_, err519 := mbTrans518.WriteString(arg517)
		if err519 != nil {
			Usage()
			return
		}
		factory520 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt521 := factory520.GetProtocol(mbTrans518)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err522 := argvalue0.Read(jsProt521)
		if err522 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg524 := flag.Arg(3)
		mbTrans525 := thrift.NewTMemoryBufferLen(len(arg524))
		defer mbTrans525.Close()
		_, err526 := mbTrans525.WriteString(arg524)
		if err526 != nil {
			Usage()
			return
		}
		factory527 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt528 := factory527.GetProtocol(mbTrans525)
		containerStruct2 := hive_metastore.NewGetPrivilegeSetArgs()
		err529 := containerStruct2.ReadField3(jsProt528)
		if err529 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		arg531 := flag.Arg(3)
		mbTrans532 := thrift.NewTMemoryBufferLen(len(arg531))
		defer mbTrans532.Close()
		_, err533 := mbTrans532.WriteString(arg531)
		if err533 != nil {
			Usage()
			return
		}
		factory534 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt535 := factory534.GetProtocol(mbTrans532)
		argvalue2 := hive_metastore.NewHiveObjectRef()
		err536 := argvalue2.Read(jsProt535)
		if err536 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg537 := flag.Arg(1)
		mbTrans538 := thrift.NewTMemoryBufferLen(len(arg537))
		defer mbTrans538.Close()
		_, err539 := mbTrans538.WriteString(arg537)
		if err539 != nil {
			Usage()
			return
		}
		factory540 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt541 := factory540.GetProtocol(mbTrans538)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err542 := argvalue0.Read(jsProt541)
		if err542 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg543 := flag.Arg(1)
		mbTrans544 := thrift.NewTMemoryBufferLen(len(arg543))
		defer mbTrans544.Close()
		_, err545 := mbTrans544.WriteString(arg543)
		if err545 != nil {
			Usage()
			return
		}
		factory546 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt547 := factory546.GetProtocol(mbTrans544)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err548 := argvalue0.Read(jsProt547)
		if err548 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(value0))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDelegationToken(value0))
		fmt.Print("\n")
		break
	case "get_delegation_token_with_signature":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationTokenWithSignature requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationTokenWithSignature(value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(value0))
		fmt.Print("\n")
		break
	case "getName":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetName())
		fmt.Print("\n")
		break
	case "getVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetVersion())
		fmt.Print("\n")
		break
	case "getStatus":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatus())
		fmt.Print("\n")
		break
	case "getStatusDetails":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatusDetails())
		fmt.Print("\n")
		break
	case "getCounters":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCounters())
		fmt.Print("\n")
		break
	case "getCounter":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCounter(value0))
		fmt.Print("\n")
		break
	case "setOption":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetOption(value0, value1))
		fmt.Print("\n")
		break
	case "getOption":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetOption(value0))
		fmt.Print("\n")
		break
	case "getOptions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOptions())
		fmt.Print("\n")
		break
	case "getCpuProfile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
			flag.Usage()
		}
		tmp0, err558 := (strconv.Atoi(flag.Arg(1)))
		if err558 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetCpuProfile(value0))
		fmt.Print("\n")
		break
	case "aliveSince":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.AliveSince())
		fmt.Print("\n")
		break
	case "reinitialize":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Reinitialize())
		fmt.Print("\n")
		break
	case "shutdown":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Shutdown())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
