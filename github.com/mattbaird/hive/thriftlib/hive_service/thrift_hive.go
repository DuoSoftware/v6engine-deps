// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_service

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/mattbaird/hive/thriftlib/fb303"
	"github.com/mattbaird/hive/thriftlib/hive_metastore"
	"github.com/mattbaird/hive/thriftlib/queryplan"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = fb303.GoUnusedProtection__
var _ = hive_metastore.GoUnusedProtection__
var _ = queryplan.GoUnusedProtection__

type ThriftHive interface {
	hive_metastore.ThriftHiveMetastore

	// Parameters:
	//  - Query
	Execute(query string) (ex *HiveServerException, err error)
	FetchOne() (r string, ex *HiveServerException, err error)
	// Parameters:
	//  - NumRows
	FetchN(numRows int32) (r []string, ex *HiveServerException, err error)
	FetchAll() (r []string, ex *HiveServerException, err error)
	GetMetaStoreSchema() (r *hive_metastore.Schema, ex *HiveServerException, err error)
	GetThriftSchema() (r *hive_metastore.Schema, ex *HiveServerException, err error)
	GetClusterStatus() (r *HiveClusterStatus, ex *HiveServerException, err error)
	GetQueryPlan() (r *queryplan.QueryPlan, ex *HiveServerException, err error)
	Clean() (err error)
}

type ThriftHiveClient struct {
	*hive_metastore.ThriftHiveMetastoreClient
}

func NewThriftHiveClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveClient {
	return &ThriftHiveClient{ThriftHiveMetastoreClient: hive_metastore.NewThriftHiveMetastoreClientFactory(t, f)}
}

func NewThriftHiveClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveClient {
	return &ThriftHiveClient{ThriftHiveMetastoreClient: hive_metastore.NewThriftHiveMetastoreClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Query
func (p *ThriftHiveClient) Execute(query string) (ex *HiveServerException, err error) {
	if err = p.sendExecute(query); err != nil {
		return
	}
	return p.recvExecute()
}

func (p *ThriftHiveClient) sendExecute(query string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("execute", thrift.CALL, p.SeqId)
	args0 := NewExecuteArgs()
	args0.Query = query
	err = args0.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvExecute() (ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1 := NewExecuteResult()
	err = result1.Read(iprot)
	iprot.ReadMessageEnd()
	if result1.Ex != nil {
		ex = result1.Ex
	}
	return
}

func (p *ThriftHiveClient) FetchOne() (r string, ex *HiveServerException, err error) {
	if err = p.sendFetchOne(); err != nil {
		return
	}
	return p.recvFetchOne()
}

func (p *ThriftHiveClient) sendFetchOne() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("fetchOne", thrift.CALL, p.SeqId)
	args4 := NewFetchOneArgs()
	err = args4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvFetchOne() (value string, ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result5 := NewFetchOneResult()
	err = result5.Read(iprot)
	iprot.ReadMessageEnd()
	value = result5.Success
	if result5.Ex != nil {
		ex = result5.Ex
	}
	return
}

// Parameters:
//  - NumRows
func (p *ThriftHiveClient) FetchN(numRows int32) (r []string, ex *HiveServerException, err error) {
	if err = p.sendFetchN(numRows); err != nil {
		return
	}
	return p.recvFetchN()
}

func (p *ThriftHiveClient) sendFetchN(numRows int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("fetchN", thrift.CALL, p.SeqId)
	args8 := NewFetchNArgs()
	args8.NumRows = numRows
	err = args8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvFetchN() (value []string, ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result9 := NewFetchNResult()
	err = result9.Read(iprot)
	iprot.ReadMessageEnd()
	value = result9.Success
	if result9.Ex != nil {
		ex = result9.Ex
	}
	return
}

func (p *ThriftHiveClient) FetchAll() (r []string, ex *HiveServerException, err error) {
	if err = p.sendFetchAll(); err != nil {
		return
	}
	return p.recvFetchAll()
}

func (p *ThriftHiveClient) sendFetchAll() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("fetchAll", thrift.CALL, p.SeqId)
	args12 := NewFetchAllArgs()
	err = args12.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvFetchAll() (value []string, ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result13 := NewFetchAllResult()
	err = result13.Read(iprot)
	iprot.ReadMessageEnd()
	value = result13.Success
	if result13.Ex != nil {
		ex = result13.Ex
	}
	return
}

func (p *ThriftHiveClient) GetSchema() (r *hive_metastore.Schema, ex *HiveServerException, err error) {
	if err = p.sendGetSchema(); err != nil {
		return
	}
	return p.recvGetSchema()
}

func (p *ThriftHiveClient) sendGetSchema() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSchema", thrift.CALL, p.SeqId)
	args16 := NewGetSchemaArgs()
	err = args16.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvGetSchema() (value *hive_metastore.Schema, ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result17 := NewGetSchemaResult()
	err = result17.Read(iprot)
	iprot.ReadMessageEnd()
	value = result17.Success
	if result17.Ex != nil {
		ex = result17.Ex
	}
	return
}

func (p *ThriftHiveClient) GetThriftSchema() (r *hive_metastore.Schema, ex *HiveServerException, err error) {
	if err = p.sendGetThriftSchema(); err != nil {
		return
	}
	return p.recvGetThriftSchema()
}

func (p *ThriftHiveClient) sendGetThriftSchema() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getThriftSchema", thrift.CALL, p.SeqId)
	args20 := NewGetThriftSchemaArgs()
	err = args20.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvGetThriftSchema() (value *hive_metastore.Schema, ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result21 := NewGetThriftSchemaResult()
	err = result21.Read(iprot)
	iprot.ReadMessageEnd()
	value = result21.Success
	if result21.Ex != nil {
		ex = result21.Ex
	}
	return
}

func (p *ThriftHiveClient) GetClusterStatus() (r *HiveClusterStatus, ex *HiveServerException, err error) {
	if err = p.sendGetClusterStatus(); err != nil {
		return
	}
	return p.recvGetClusterStatus()
}

func (p *ThriftHiveClient) sendGetClusterStatus() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getClusterStatus", thrift.CALL, p.SeqId)
	args24 := NewGetClusterStatusArgs()
	err = args24.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvGetClusterStatus() (value *HiveClusterStatus, ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result25 := NewGetClusterStatusResult()
	err = result25.Read(iprot)
	iprot.ReadMessageEnd()
	value = result25.Success
	if result25.Ex != nil {
		ex = result25.Ex
	}
	return
}

func (p *ThriftHiveClient) GetQueryPlan() (r *queryplan.QueryPlan, ex *HiveServerException, err error) {
	if err = p.sendGetQueryPlan(); err != nil {
		return
	}
	return p.recvGetQueryPlan()
}

func (p *ThriftHiveClient) sendGetQueryPlan() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getQueryPlan", thrift.CALL, p.SeqId)
	args28 := NewGetQueryPlanArgs()
	err = args28.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvGetQueryPlan() (value *queryplan.QueryPlan, ex *HiveServerException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result29 := NewGetQueryPlanResult()
	err = result29.Read(iprot)
	iprot.ReadMessageEnd()
	value = result29.Success
	if result29.Ex != nil {
		ex = result29.Ex
	}
	return
}

func (p *ThriftHiveClient) Clean() (err error) {
	if err = p.sendClean(); err != nil {
		return
	}
	return p.recvClean()
}

func (p *ThriftHiveClient) sendClean() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("clean", thrift.CALL, p.SeqId)
	args32 := NewCleanArgs()
	err = args32.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *ThriftHiveClient) recvClean() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result33 := NewCleanResult()
	err = result33.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

type ThriftHiveProcessor struct {
	*hive_metastore.ThriftHiveMetastoreProcessor
}

func NewThriftHiveProcessor(handler ThriftHive) *ThriftHiveProcessor {
	self36 := &ThriftHiveProcessor{hive_metastore.NewThriftHiveMetastoreProcessor(handler)}
	self36.AddToProcessorMap("execute", &thriftHiveProcessorExecute{handler: handler})
	self36.AddToProcessorMap("fetchOne", &thriftHiveProcessorFetchOne{handler: handler})
	self36.AddToProcessorMap("fetchN", &thriftHiveProcessorFetchN{handler: handler})
	self36.AddToProcessorMap("fetchAll", &thriftHiveProcessorFetchAll{handler: handler})
	self36.AddToProcessorMap("getSchema", &thriftHiveProcessorGetSchema{handler: handler})
	self36.AddToProcessorMap("getThriftSchema", &thriftHiveProcessorGetThriftSchema{handler: handler})
	self36.AddToProcessorMap("getClusterStatus", &thriftHiveProcessorGetClusterStatus{handler: handler})
	self36.AddToProcessorMap("getQueryPlan", &thriftHiveProcessorGetQueryPlan{handler: handler})
	self36.AddToProcessorMap("clean", &thriftHiveProcessorClean{handler: handler})
	return self36
}

type thriftHiveProcessorExecute struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExecuteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExecuteResult()
	if result.Ex, err = p.handler.Execute(args.Query); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: "+err.Error())
		oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("execute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorFetchOne struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorFetchOne) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFetchOneArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchOne", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFetchOneResult()
	if result.Success, result.Ex, err = p.handler.FetchOne(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOne: "+err.Error())
		oprot.WriteMessageBegin("fetchOne", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("fetchOne", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorFetchN struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorFetchN) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFetchNArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchN", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFetchNResult()
	if result.Success, result.Ex, err = p.handler.FetchN(args.NumRows); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchN: "+err.Error())
		oprot.WriteMessageBegin("fetchN", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("fetchN", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorFetchAll struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorFetchAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFetchAllArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFetchAllResult()
	if result.Success, result.Ex, err = p.handler.FetchAll(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchAll: "+err.Error())
		oprot.WriteMessageBegin("fetchAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("fetchAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorGetSchema struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorGetSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSchemaArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSchemaResult()
	if result.Success, result.Ex, err = p.handler.GetMetaStoreSchema(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSchema: "+err.Error())
		oprot.WriteMessageBegin("getSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSchema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorGetThriftSchema struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorGetThriftSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetThriftSchemaArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getThriftSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetThriftSchemaResult()
	if result.Success, result.Ex, err = p.handler.GetThriftSchema(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getThriftSchema: "+err.Error())
		oprot.WriteMessageBegin("getThriftSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getThriftSchema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorGetClusterStatus struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorGetClusterStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetClusterStatusArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getClusterStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetClusterStatusResult()
	if result.Success, result.Ex, err = p.handler.GetClusterStatus(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClusterStatus: "+err.Error())
		oprot.WriteMessageBegin("getClusterStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getClusterStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorGetQueryPlan struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorGetQueryPlan) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetQueryPlanArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueryPlan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetQueryPlanResult()
	if result.Success, result.Ex, err = p.handler.GetQueryPlan(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueryPlan: "+err.Error())
		oprot.WriteMessageBegin("getQueryPlan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getQueryPlan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveProcessorClean struct {
	handler ThriftHive
}

func (p *thriftHiveProcessorClean) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCleanArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCleanResult()
	if err = p.handler.Clean(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clean: "+err.Error())
		oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("clean", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type ExecuteArgs struct {
	Query string `thrift:"query,1"`
}

func NewExecuteArgs() *ExecuteArgs {
	return &ExecuteArgs{}
}

func (p *ExecuteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecuteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Query = v
	}
	return nil
}

func (p *ExecuteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:query: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return fmt.Errorf("%T.query (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:query: %s", p, err)
	}
	return err
}

func (p *ExecuteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteArgs(%+v)", *p)
}

type ExecuteResult struct {
	Ex *HiveServerException `thrift:"ex,1"`
}

func NewExecuteResult() *ExecuteResult {
	return &ExecuteResult{}
}

func (p *ExecuteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecuteResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *ExecuteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecuteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *ExecuteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteResult(%+v)", *p)
}

type FetchOneArgs struct {
}

func NewFetchOneArgs() *FetchOneArgs {
	return &FetchOneArgs{}
}

func (p *FetchOneArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchOneArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOne_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchOneArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchOneArgs(%+v)", *p)
}

type FetchOneResult struct {
	Success string               `thrift:"success,0"`
	Ex      *HiveServerException `thrift:"ex,1"`
}

func NewFetchOneResult() *FetchOneResult {
	return &FetchOneResult{}
}

func (p *FetchOneResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchOneResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *FetchOneResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *FetchOneResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchOne_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchOneResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *FetchOneResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *FetchOneResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchOneResult(%+v)", *p)
}

type FetchNArgs struct {
	NumRows int32 `thrift:"numRows,1"`
}

func NewFetchNArgs() *FetchNArgs {
	return &FetchNArgs{}
}

func (p *FetchNArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchNArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NumRows = v
	}
	return nil
}

func (p *FetchNArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchN_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchNArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numRows", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:numRows: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumRows)); err != nil {
		return fmt.Errorf("%T.numRows (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:numRows: %s", p, err)
	}
	return err
}

func (p *FetchNArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchNArgs(%+v)", *p)
}

type FetchNResult struct {
	Success []string             `thrift:"success,0"`
	Ex      *HiveServerException `thrift:"ex,1"`
}

func NewFetchNResult() *FetchNResult {
	return &FetchNResult{}
}

func (p *FetchNResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchNResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem37 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem37 = v
		}
		p.Success = append(p.Success, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *FetchNResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *FetchNResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchN_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchNResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchNResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *FetchNResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchNResult(%+v)", *p)
}

type FetchAllArgs struct {
}

func NewFetchAllArgs() *FetchAllArgs {
	return &FetchAllArgs{}
}

func (p *FetchAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchAll_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchAllArgs(%+v)", *p)
}

type FetchAllResult struct {
	Success []string             `thrift:"success,0"`
	Ex      *HiveServerException `thrift:"ex,1"`
}

func NewFetchAllResult() *FetchAllResult {
	return &FetchAllResult{}
}

func (p *FetchAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchAllResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem38 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem38 = v
		}
		p.Success = append(p.Success, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *FetchAllResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *FetchAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchAll_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *FetchAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchAllResult(%+v)", *p)
}

type GetSchemaArgs struct {
}

func NewGetSchemaArgs() *GetSchemaArgs {
	return &GetSchemaArgs{}
}

func (p *GetSchemaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSchema_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaArgs(%+v)", *p)
}

type GetSchemaResult struct {
	Success *hive_metastore.Schema `thrift:"success,0"`
	Ex      *HiveServerException   `thrift:"ex,1"`
}

func NewGetSchemaResult() *GetSchemaResult {
	return &GetSchemaResult{}
}

func (p *GetSchemaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaResult) readField0(iprot thrift.TProtocol) error {
	p.Success = hive_metastore.NewSchema()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetSchemaResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *GetSchemaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSchema_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaResult(%+v)", *p)
}

type GetThriftSchemaArgs struct {
}

func NewGetThriftSchemaArgs() *GetThriftSchemaArgs {
	return &GetThriftSchemaArgs{}
}

func (p *GetThriftSchemaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetThriftSchemaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThriftSchema_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetThriftSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetThriftSchemaArgs(%+v)", *p)
}

type GetThriftSchemaResult struct {
	Success *hive_metastore.Schema `thrift:"success,0"`
	Ex      *HiveServerException   `thrift:"ex,1"`
}

func NewGetThriftSchemaResult() *GetThriftSchemaResult {
	return &GetThriftSchemaResult{}
}

func (p *GetThriftSchemaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetThriftSchemaResult) readField0(iprot thrift.TProtocol) error {
	p.Success = hive_metastore.NewSchema()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetThriftSchemaResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *GetThriftSchemaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThriftSchema_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetThriftSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetThriftSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetThriftSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetThriftSchemaResult(%+v)", *p)
}

type GetClusterStatusArgs struct {
}

func NewGetClusterStatusArgs() *GetClusterStatusArgs {
	return &GetClusterStatusArgs{}
}

func (p *GetClusterStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetClusterStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getClusterStatus_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetClusterStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterStatusArgs(%+v)", *p)
}

type GetClusterStatusResult struct {
	Success *HiveClusterStatus   `thrift:"success,0"`
	Ex      *HiveServerException `thrift:"ex,1"`
}

func NewGetClusterStatusResult() *GetClusterStatusResult {
	return &GetClusterStatusResult{}
}

func (p *GetClusterStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetClusterStatusResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewHiveClusterStatus()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetClusterStatusResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *GetClusterStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getClusterStatus_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetClusterStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetClusterStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetClusterStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterStatusResult(%+v)", *p)
}

type GetQueryPlanArgs struct {
}

func NewGetQueryPlanArgs() *GetQueryPlanArgs {
	return &GetQueryPlanArgs{}
}

func (p *GetQueryPlanArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueryPlanArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueryPlan_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueryPlanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueryPlanArgs(%+v)", *p)
}

type GetQueryPlanResult struct {
	Success *queryplan.QueryPlan `thrift:"success,0"`
	Ex      *HiveServerException `thrift:"ex,1"`
}

func NewGetQueryPlanResult() *GetQueryPlanResult {
	return &GetQueryPlanResult{}
}

func (p *GetQueryPlanResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueryPlanResult) readField0(iprot thrift.TProtocol) error {
	p.Success = queryplan.NewQueryPlan()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetQueryPlanResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewHiveServerException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *GetQueryPlanResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueryPlan_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueryPlanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetQueryPlanResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetQueryPlanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueryPlanResult(%+v)", *p)
}

type CleanArgs struct {
}

func NewCleanArgs() *CleanArgs {
	return &CleanArgs{}
}

func (p *CleanArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CleanArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clean_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CleanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CleanArgs(%+v)", *p)
}

type CleanResult struct {
}

func NewCleanResult() *CleanResult {
	return &CleanResult{}
}

func (p *CleanResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CleanResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clean_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CleanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CleanResult(%+v)", *p)
}
